{
  "openapi": "3.0.3",
  "info": {
    "title": "World Anvil Public API Documentation",
    "version": "2.0.0 - Boromir",
    "contact": {
      "name": "World Anvil Team",
      "email": "contact@worldanvil.com",
      "url": "https://www.worldanvil.com"
    },
    "license": {
      "name": "API License",
      "url": "https://www.worldanvil.com/api/external/boromir/documentation#licence-section"
    },
    "description": "Welcome to the World Anvil Public API Documentation. This API provides developers and World Anvil users with programmatic access to the extensive features of the World Anvil worldbuilding platform.\nWhether you're building integrations, automating tasks, or creating custom experiences, this API empowers you to interact with your worldbuilding data seamlessly."
  },
  "servers": [
    {
      "url": "https://www.worldanvil.com/api/external/boromir",
      "description": "Boromir Main Server",
      "variables": {}
    }
  ],
  "paths": {
    "/article": {
      "get": {
        "tags": [
          "Article"
        ],
        "summary": "Read Article",
        "description": "Retrieve an article with the given id. The granularity query parameter can be used to specify  the level of detail of the article. The default is 0.  The higher the granularity, the more fields are returned.\nCheck the schemas for the available fields. The generic fields are listed per granularity level. The template specific fields are listed per template (not complete). They appear on granularity level 0, 1 or 2.\n",
        "operationId": "readArticle",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "1",
                "2",
                "3"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested article resource.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                        },
                        {
                          "type": "object",
                          "title": "Article (Any) - GR -1",
                          "properties": {
                            "isEditable": {
                              "type": "boolean",
                              "readOnly": true
                            },
                            "success": {
                              "type": "boolean",
                              "readOnly": true
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1article/get/responses/200/content/application~1json/schema/oneOf/0"
                        },
                        {
                          "$ref": "#/paths/~1article/patch/requestBody/content/application~1json/schema/allOf/1"
                        },
                        {
                          "title": "Article (Generic) - GR 0",
                          "description": "Schema of a generic article with the core properties."
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1article/get/responses/200/content/application~1json/schema/oneOf/1"
                        },
                        {
                          "type": "object",
                          "title": "Article (Generic) - GR 1",
                          "properties": {
                            "content": {
                              "type": "string",
                              "example": "Content"
                            },
                            "author": {
                              "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                            },
                            "category": {
                              "allOf": [
                                {
                                  "$ref": "#/paths/~1category/put/responses/200/content/application~1json/schema"
                                },
                                {
                                  "type": "object",
                                  "nullable": true
                                }
                              ]
                            },
                            "world": {
                              "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1article/get/responses/200/content/application~1json/schema/oneOf/2"
                        },
                        {
                          "$ref": "#/paths/~1article/patch/requestBody/content/application~1json/schema/allOf/2"
                        },
                        {
                          "type": "object",
                          "description": "These are the object properties of the article which can be updated.",
                          "properties": {
                            "cover": {
                              "allOf": [
                                {
                                  "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                                },
                                {
                                  "nullable": true
                                }
                              ]
                            },
                            "gallery": {
                              "allOf": [
                                {
                                  "$ref": "#/paths/~1image/get/responses/200/content/application~1json/schema/oneOf/2/allOf/1/properties/gallieries/items"
                                },
                                {
                                  "type": "object",
                                  "nullable": true
                                }
                              ]
                            },
                            "articleNext": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "articlePrevious": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "block": {
                              "allOf": [
                                {
                                  "$ref": "#/paths/~1block/put/responses/200/content/application~1json/schema"
                                },
                                {
                                  "type": "object",
                                  "nullable": true
                                }
                              ]
                            },
                            "orgchart": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "title": "Org Chart",
                                  "description": "Org Chart resource.",
                                  "readOnly": true,
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "format": "uuid",
                                      "nullable": false,
                                      "readOnly": true
                                    },
                                    "title": {
                                      "type": "string",
                                      "example": "Org Chart Name",
                                      "readOnly": true
                                    },
                                    "slug": {
                                      "type": "string",
                                      "nullable": true,
                                      "readOnly": true
                                    },
                                    "state": {
                                      "type": "string",
                                      "nullable": true,
                                      "readOnly": true
                                    },
                                    "isWip": {
                                      "type": "boolean",
                                      "nullable": true,
                                      "readOnly": true
                                    },
                                    "isDraft": {
                                      "type": "boolean",
                                      "nullable": true,
                                      "readOnly": true
                                    },
                                    "entityClass": {
                                      "type": "string",
                                      "enum": [
                                        "OrgChart"
                                      ],
                                      "readOnly": true
                                    },
                                    "icon": {
                                      "type": "string",
                                      "readOnly": true
                                    },
                                    "url": {
                                      "type": "string",
                                      "nullable": true,
                                      "readOnly": true
                                    },
                                    "subscribergroups": {
                                      "type": "array",
                                      "example": [],
                                      "readOnly": true,
                                      "items": {
                                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                                      }
                                    },
                                    "folderId": {
                                      "type": "string",
                                      "nullable": true,
                                      "readOnly": true
                                    },
                                    "tags": {
                                      "type": "string",
                                      "nullable": true,
                                      "readOnly": true
                                    },
                                    "updateDate": {
                                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "nullable": true
                                }
                              ]
                            },
                            "manuscripts": {
                              "type": "array",
                              "items": {
                                "$ref": "#/paths/~1world~1manuscripts/post/responses/200/content/application~1json/schema/properties/entities/items"
                              },
                              "example": []
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1article/get/responses/200/content/application~1json/schema/oneOf/3"
                        },
                        {
                          "type": "object",
                          "title": "Article (Generic) - GR 3",
                          "properties": {
                            "ancestry": {
                              "type": "object",
                              "description": "The ancestry of the article. The firstUp, secondUp, and thirdUp fields are the first, second, and third  parent article category or world of the article. Note that secondUp and thirdUp are nullable.\n",
                              "readOnly": true,
                              "properties": {
                                "firstUp": {
                                  "oneOf": [
                                    {
                                      "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                                    },
                                    {
                                      "$ref": "#/paths/~1category/put/responses/200/content/application~1json/schema"
                                    },
                                    {
                                      "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                                    }
                                  ]
                                },
                                "secondUp": {
                                  "nullable": true,
                                  "oneOf": [
                                    {
                                      "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                                    },
                                    {
                                      "$ref": "#/paths/~1category/put/responses/200/content/application~1json/schema"
                                    },
                                    {
                                      "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                                    }
                                  ]
                                },
                                "thirdUp": {
                                  "nullable": true,
                                  "oneOf": [
                                    {
                                      "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                                    },
                                    {
                                      "$ref": "#/paths/~1category/put/responses/200/content/application~1json/schema"
                                    },
                                    {
                                      "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Location Template Fields",
                      "description": "All the fields available for the location template. Combine this with the generic article fields for a complete list of fields.",
                      "properties": {
                        "alternativename": {
                          "type": "string",
                          "nullable": true,
                          "example": "Alternative Name(s)"
                        },
                        "geography": {
                          "type": "string",
                          "nullable": true
                        },
                        "naturalresources": {
                          "type": "string",
                          "nullable": true
                        },
                        "population": {
                          "type": "string",
                          "nullable": true
                        },
                        "areaSize": {
                          "type": "string",
                          "nullable": true
                        },
                        "demographics": {
                          "type": "string",
                          "nullable": true
                        },
                        "demonym": {
                          "type": "string",
                          "nullable": true
                        },
                        "defences": {
                          "type": "string",
                          "nullable": true,
                          "example": "Defenses"
                        },
                        "infrastructure": {
                          "type": "string",
                          "nullable": true
                        },
                        "guilds": {
                          "type": "string",
                          "nullable": true
                        },
                        "history": {
                          "type": "string",
                          "nullable": true,
                          "example": "History"
                        },
                        "tourism": {
                          "type": "string",
                          "nullable": true,
                          "example": "Tourism"
                        },
                        "industry": {
                          "type": "string",
                          "nullable": true
                        },
                        "architecture": {
                          "type": "string",
                          "nullable": true,
                          "example": "Architecture"
                        },
                        "government": {
                          "type": "string",
                          "nullable": true
                        },
                        "assets": {
                          "type": "string",
                          "nullable": true
                        },
                        "locationTemplateType": {
                          "type": "string",
                          "nullable": true
                        },
                        "constructed": {
                          "type": "string",
                          "nullable": true,
                          "example": 2020
                        },
                        "ruined": {
                          "type": "string",
                          "nullable": true,
                          "example": 2314
                        },
                        "florafauna": {
                          "type": "string",
                          "nullable": true
                        },
                        "ecosystem": {
                          "type": "string",
                          "nullable": true
                        },
                        "ecosystemCycles": {
                          "type": "string",
                          "nullable": true
                        },
                        "localizedPhenomena": {
                          "type": "string",
                          "nullable": true
                        },
                        "climate": {
                          "type": "string",
                          "nullable": true
                        },
                        "alterations": {
                          "type": "string",
                          "nullable": true,
                          "example": "Alterations"
                        },
                        "purpose": {
                          "type": "string",
                          "nullable": true,
                          "example": "Purpose"
                        },
                        "design": {
                          "type": "string",
                          "nullable": true,
                          "example": "Design"
                        },
                        "entries": {
                          "type": "string",
                          "nullable": true,
                          "example": "Entries"
                        },
                        "denizens": {
                          "type": "string",
                          "nullable": true,
                          "example": "Denizens"
                        },
                        "valuables": {
                          "type": "string",
                          "nullable": true,
                          "example": "Valuables & Treasure"
                        },
                        "hazards": {
                          "type": "string",
                          "nullable": true,
                          "example": "Hazards & Traps"
                        },
                        "effects": {
                          "type": "string",
                          "nullable": true,
                          "example": "Environment & Effects"
                        },
                        "sensory": {
                          "type": "string",
                          "nullable": true,
                          "example": "Sensory & Appearances"
                        },
                        "properties": {
                          "type": "string",
                          "nullable": true,
                          "example": "Special Properties"
                        },
                        "contents": {
                          "type": "string",
                          "nullable": true,
                          "example": "Contents & Furnishings"
                        },
                        "pointOfInterest": {
                          "type": "string",
                          "nullable": true
                        },
                        "district": {
                          "type": "string",
                          "nullable": true
                        },
                        "parent": {
                          "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                        },
                        "type": {
                          "type": "object",
                          "title": "LocationType",
                          "description": "Types associated with the three location templates.",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "title": {
                              "type": "string",
                              "example": "Abbey"
                            }
                          }
                        },
                        "person": {
                          "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                        },
                        "vehicle": {
                          "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                        },
                        "rank": {
                          "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                        },
                        "organization": {
                          "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                        },
                        "additionalRulers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                          }
                        },
                        "contenders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                          }
                        },
                        "connectedRooms": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Article"
        ],
        "summary": "Create Article",
        "description": "Create an article. Check the schemas for the required fields to create an article. To add template specific fields check the template schemas in the article GET endpoint.\n",
        "operationId": "createArticle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/paths/~1article/patch/requestBody/content/application~1json/schema"
                  },
                  {
                    "type": "object",
                    "title": "Article (Generic) - Create",
                    "description": "The fields to create a new article. The fields with a * are required.",
                    "required": [
                      "title",
                      "templateType",
                      "world"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created article resource.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1article/patch/requestBody/content/application~1json/schema/allOf/0"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Article"
        ],
        "summary": "Delete Article",
        "description": "Delete an article. This action is irreversible.",
        "operationId": "deleteArticle",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "default": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Article"
        ],
        "summary": "Update Article",
        "description": "Update the metadata, content and relationships of an article. Check the schemas for the required fields to update an article.  To add template specific fields check the template schemas in the article GET endpoint.",
        "operationId": "updateArticle",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "title": "Article (Any)",
                    "description": "Schema of an article.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                      },
                      "title": {
                        "type": "string",
                        "example": "Article Title"
                      },
                      "slug": {
                        "type": "string",
                        "example": "article-title-landmark",
                        "readOnly": true
                      },
                      "state": {
                        "type": "string",
                        "enum": [
                          "public",
                          "private"
                        ]
                      },
                      "isWip": {
                        "type": "boolean"
                      },
                      "isDraft": {
                        "type": "boolean"
                      },
                      "entityClass": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                          "Ethnicity",
                          "Article",
                          "Landmark",
                          "Location",
                          "Ritual",
                          "Myth",
                          "Technology",
                          "Spell",
                          "Law",
                          "Prose",
                          "MilitaryConflict",
                          "Language",
                          "Document",
                          "Person",
                          "Organization",
                          "Plot",
                          "Species",
                          "Vehicle",
                          "Profession",
                          "Item",
                          "Formation",
                          "Rank",
                          "Condition",
                          "Material",
                          "Settlement",
                          "Report"
                        ]
                      },
                      "icon": {
                        "type": "string",
                        "nullable": true,
                        "example": "ra ra-dragon"
                      },
                      "url": {
                        "type": "string",
                        "readOnly": true,
                        "example": "http://www.worldanvil.com/w/<world-slug>/a/<article-slug>"
                      },
                      "folderId": {
                        "type": "string",
                        "readOnly": true,
                        "format": "uuid"
                      },
                      "tags": {
                        "type": "string",
                        "example": "tag,tag2"
                      },
                      "updateDate": {
                        "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "position": {
                        "type": "integer",
                        "format": "int32",
                        "example": 1000
                      },
                      "excerpt": {
                        "type": "string",
                        "example": "Excerpt"
                      },
                      "wordcount": {
                        "type": "integer",
                        "format": "int32",
                        "example": 37,
                        "readOnly": true
                      },
                      "creationDate": {
                        "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                      },
                      "publicationDate": {
                        "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                      },
                      "notificationDate": {
                        "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                      },
                      "likes": {
                        "type": "array",
                        "items": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                        },
                        "readOnly": true
                      },
                      "views": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                      },
                      "userMetadata": {
                        "nullable": true,
                        "readOnly": true
                      },
                      "articleMetadata": {
                        "nullable": true,
                        "readOnly": true
                      },
                      "cssClasses": {
                        "type": "string",
                        "example": "a-css-class"
                      },
                      "displayCss": {
                        "type": "string",
                        "format": "css"
                      },
                      "templateType": {
                        "type": "string",
                        "enum": [
                          "article"
                        ]
                      },
                      "customArticleTemplate": {
                        "type": "string",
                        "nullable": true
                      }
                    }
                  },
                  {
                    "type": "object",
                    "title": "Article (Generic) - GR 2",
                    "properties": {
                      "pronunciation": {
                        "type": "string",
                        "example": "Pronunciation"
                      },
                      "snippet": {
                        "type": "string",
                        "example": "Mouseover Snippet"
                      },
                      "seeded": {
                        "type": "string",
                        "example": "STORYTELLER SEEDS"
                      },
                      "sidebarcontent": {
                        "type": "string",
                        "example": "Sidebar: Top"
                      },
                      "sidepanelcontenttop": {
                        "type": "string",
                        "example": "Sidebar: Content Panel Top"
                      },
                      "sidepanelcontent": {
                        "type": "string",
                        "example": "Sidebar: Content Panel Bottom"
                      },
                      "sidebarcontentbottom": {
                        "type": "string",
                        "example": "Sidebar: Bottom"
                      },
                      "footnotes": {
                        "type": "string",
                        "example": "Footnotes"
                      },
                      "fullfooter": {
                        "type": "string",
                        "example": "Full Width Footer"
                      },
                      "authornotes": {
                        "type": "string",
                        "example": "Author's Notes"
                      },
                      "scrapbook": {
                        "type": "string",
                        "example": "Scrapbook"
                      },
                      "credits": {
                        "type": "string",
                        "example": "Credits"
                      },
                      "displaySidebar": {
                        "type": "boolean"
                      },
                      "timeline": {
                        "allOf": [
                          {
                            "$ref": "#/paths/~1timeline/put/responses/200/content/application~1json/schema"
                          },
                          {
                            "readOnly": true
                          }
                        ]
                      },
                      "prompt": {
                        "type": "object",
                        "title": "Prompt",
                        "description": "Worldbuilding prompt resource.",
                        "readOnly": true,
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "nullable": false,
                            "readOnly": true
                          },
                          "title": {
                            "type": "string",
                            "example": "Worldbuilding Prompt Name",
                            "readOnly": true
                          },
                          "slug": {
                            "type": "string",
                            "nullable": true,
                            "readOnly": true
                          },
                          "state": {
                            "type": "string",
                            "nullable": true,
                            "readOnly": true
                          },
                          "isWip": {
                            "type": "boolean",
                            "nullable": true,
                            "readOnly": true
                          },
                          "isDraft": {
                            "type": "boolean",
                            "nullable": true,
                            "readOnly": true
                          },
                          "entityClass": {
                            "type": "string",
                            "enum": [
                              "Prompt"
                            ],
                            "readOnly": true
                          },
                          "icon": {
                            "type": "string",
                            "readOnly": true
                          },
                          "url": {
                            "type": "string",
                            "nullable": true,
                            "readOnly": true
                          },
                          "subscribergroups": {
                            "type": "array",
                            "example": [],
                            "readOnly": true,
                            "items": {
                              "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                            }
                          },
                          "folderId": {
                            "type": "string",
                            "nullable": true,
                            "readOnly": true
                          },
                          "tags": {
                            "type": "string",
                            "nullable": true,
                            "readOnly": true
                          },
                          "updateDate": {
                            "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                          }
                        }
                      },
                      "showSeeded": {
                        "type": "boolean"
                      },
                      "webhookUpdate": {
                        "type": "boolean"
                      },
                      "communityUpdate": {
                        "type": "boolean"
                      },
                      "commentPlaceholder": {
                        "type": "string",
                        "nullable": true,
                        "example": "Comment Feedback Placeholder"
                      },
                      "metaTitle": {
                        "type": "string",
                        "nullable": true,
                        "example": "Page Title (SEO Metadata)"
                      },
                      "metadDescription": {
                        "type": "string",
                        "nullable": true,
                        "example": "Page Description (SEO Metadata)"
                      },
                      "subheading": {
                        "type": "string",
                        "nullable": true,
                        "example": "Subheading"
                      },
                      "coverIsMap": {
                        "type": "boolean"
                      },
                      "isFeaturedArticle": {
                        "type": "boolean"
                      },
                      "isAdultContent": {
                        "type": "boolean"
                      },
                      "isLocked": {
                        "type": "boolean"
                      },
                      "allowComments": {
                        "type": "boolean"
                      },
                      "showInToc": {
                        "type": "boolean"
                      },
                      "isEmphasized": {
                        "type": "boolean"
                      },
                      "displayAuthor": {
                        "type": "boolean"
                      },
                      "displayChildrenUnder": {
                        "type": "boolean"
                      },
                      "displayTitle": {
                        "type": "boolean"
                      },
                      "displaySheet": {
                        "type": "boolean"
                      },
                      "badge": {
                        "type": "string",
                        "nullable": true,
                        "readOnly": true
                      },
                      "secrets": {
                        "type": "array",
                        "items": {
                          "$ref": "#/paths/~1secret/put/responses/200/content/application~1json/schema"
                        },
                        "readOnly": true
                      },
                      "histories": {
                        "type": "array",
                        "items": {
                          "$ref": "#/paths/~1history/put/requestBody/content/application~1json/schema"
                        },
                        "readOnly": true
                      },
                      "editURL": {
                        "type": "string",
                        "example": "http://www.worldanvil.com/world/article/<id>/edit",
                        "readOnly": true
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "manuscripts": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      },
                      "block": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      },
                      "articleParent": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      },
                      "gallery": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      },
                      "articlePrevious": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      },
                      "articleNext": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      },
                      "cover": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      },
                      "world": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      },
                      "category": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      },
                      "author": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      },
                      "subscribergroups": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "title": "Article (Generic) - Update",
                    "description": "All fields are optional. Only the fields that are provided will be updated."
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated article resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                }
              }
            }
          }
        }
      }
    },
    "/world/articles": {
      "post": {
        "tags": [
          "Article"
        ],
        "summary": "List Articles By World",
        "description": "Retrieve a list of all articles within a world, 50 articles at a time.\nUse offset to skip the first n elements of the result, and limit to specify the maximum  number of elements to retrieve. \nThe optional category body property can be used to filter the results by category. Use the value \"-1\" to get uncategorized articles. Uncategorized articles includes articles that are not assigned to any category.  This means articles with a parent articles are included as well.\n",
        "operationId": "listArticlesByCategory",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the world to retrieve articles from.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "limit",
                  "offset"
                ],
                "properties": {
                  "limit": {
                    "type": "string",
                    "minimum": 1,
                    "maximum": 50,
                    "example": 50
                  },
                  "offset": {
                    "type": "string",
                    "minimum": 0,
                    "example": 0
                  },
                  "category": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "-1"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of article metadata resources within the limit at the offset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/block": {
      "get": {
        "tags": [
          "Block"
        ],
        "summary": "Read Block",
        "description": "Read the content of a statblock.",
        "operationId": "readBlock",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statblock metadata resource.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1block/put/responses/200/content/application~1json/schema"
                        },
                        {
                          "type": "object",
                          "title": "Block - GR -1",
                          "properties": {
                            "isEditable": {
                              "type": "boolean",
                              "readOnly": true,
                              "example": true
                            },
                            "success": {
                              "type": "boolean",
                              "readOnly": true,
                              "example": true
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1block/get/responses/200/content/application~1json/schema/oneOf/0"
                        },
                        {
                          "type": "object",
                          "title": "Block - GR 0",
                          "properties": {
                            "identifier": {
                              "type": "string"
                            },
                            "dataParser": {
                              "type": "string",
                              "format": "yaml"
                            },
                            "textualdata": {
                              "type": "string",
                              "format": "yaml"
                            },
                            "tabulardata": {
                              "type": "string",
                              "nullable": true
                            },
                            "jsondata": {
                              "type": "string",
                              "nullable": true,
                              "format": "json"
                            },
                            "isShared": {
                              "type": "boolean"
                            },
                            "isSRD": {
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1block/get/responses/200/content/application~1json/schema/oneOf/1"
                        },
                        {
                          "type": "object",
                          "title": "Block - GR 2",
                          "properties": {
                            "template": {
                              "$ref": "#/paths/~1blocktemplate/put/responses/200/content/application~1json/schema"
                            },
                            "RPGSRD": {
                              "$ref": "#/paths/~1rpgsystem/get/responses/200/content/application~1json/schema/oneOf/0"
                            },
                            "author": {
                              "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                            },
                            "folder": {
                              "$ref": "#/paths/~1blockfolder/put/responses/200/content/application~1json/schema"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Block"
        ],
        "summary": "Create Block",
        "description": "Create a new statblock. Check the schema for the available and required fields.",
        "operationId": "createBlock",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/paths/~1block/patch/requestBody/content/application~1json/schema"
                  },
                  {
                    "title": "Block - Create",
                    "description": "The fields you can set when creating a block. The required fields have a star.",
                    "required": [
                      "title",
                      "template",
                      "RPGSRD"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created statblock.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Block",
                  "description": "Metdata of a block.",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                    },
                    "title": {
                      "type": "string",
                      "example": "Block"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "private",
                        "public"
                      ]
                    },
                    "isWip": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "isDraft": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "Block"
                      ],
                      "readOnly": true
                    },
                    "icon": {
                      "type": "string",
                      "readOnly": true,
                      "example": "fa-solid fa-cube"
                    },
                    "url": {
                      "type": "string",
                      "example": "http://www.worldanvil.com/sheet/<id>/view",
                      "readOnly": true
                    },
                    "subscribergroups": {
                      "type": "array",
                      "readOnly": true,
                      "example": [],
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      }
                    },
                    "folderId": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "tags": {
                      "type": "string",
                      "example": "#character,#npc"
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Block"
        ],
        "summary": "Delete Block",
        "description": "Delete a statblock. This action is irreversible.",
        "operationId": "deleteBlock",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted statblock.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Block"
        ],
        "summary": "Update Block",
        "description": "Update the statblock metadata. Check the schema for the available fields.",
        "operationId": "updateBlock",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/paths/~1block/get/responses/200/content/application~1json/schema/oneOf/1"
                  },
                  {
                    "type": "object",
                    "title": "Block - Update",
                    "description": "The update schema for a block.",
                    "properties": {
                      "template": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      },
                      "RPGSRD": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      },
                      "author": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      },
                      "folder": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated statblock.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1block/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/blockfolder/blocks": {
      "post": {
        "tags": [
          "Block"
        ],
        "summary": "List Blocks By Block Folder",
        "description": "Retrieve a list of blocks within a block folder. Use offset to skip the first n elements of the result, and limit to specify the maximum number of elements to retrieve.",
        "operationId": "listBlocksByBlockFolder",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{blockFolderId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of blocks within a block folder.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1block/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/blockfolder": {
      "get": {
        "tags": [
          "Block Folder"
        ],
        "summary": "Read Block Folder",
        "description": "Read the content of an block folder.",
        "operationId": "readBlockFolder",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Block folder metadata resource.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1blockfolder/put/responses/200/content/application~1json/schema"
                        },
                        {
                          "type": "object",
                          "title": "Block Folder - GR -1",
                          "properties": {
                            "isEditable": {
                              "type": "boolean",
                              "example": true
                            },
                            "success": {
                              "type": "boolean",
                              "example": true
                            }
                          }
                        }
                      ]
                    },
                    {
                      "$ref": "#/paths/~1blockfolder/patch/requestBody/content/application~1json/schema"
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1blockfolder/patch/requestBody/content/application~1json/schema"
                        },
                        {
                          "type": "object",
                          "title": "Block Folder - GR 2",
                          "properties": {
                            "blocks": {
                              "type": "array",
                              "items": {
                                "$ref": "#/paths/~1block/put/responses/200/content/application~1json/schema"
                              }
                            },
                            "author": {
                              "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                            },
                            "world": {
                              "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Block Folder"
        ],
        "summary": "Create Block Folder",
        "description": "Create a new block folder. Check the schema for the available and required fields.",
        "operationId": "createBlockFolder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1blockfolder/patch/requestBody/content/application~1json/schema"
                      },
                      {
                        "type": "object",
                        "title": "Block Folder - Update",
                        "description": "The update schema for a block folder.",
                        "properties": {
                          "author": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "world": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          }
                        }
                      }
                    ]
                  },
                  {
                    "title": "Block Folder - Create",
                    "description": "The fields you can set when creating a block folder. The required fields have a star.",
                    "required": [
                      "title",
                      "world"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created block folder reference.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Block Folder",
                  "description": "Resource object of a block folder.",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                    },
                    "title": {
                      "type": "string",
                      "example": "Block Folder"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "state": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "isWip": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "isDraft": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "BlockFolder"
                      ],
                      "readOnly": true
                    },
                    "icon": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "url": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "subscribergroups": {
                      "type": "array",
                      "readOnly": true,
                      "example": [],
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      }
                    },
                    "folderId": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "tags": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Block Folder"
        ],
        "summary": "Delete Block Folder",
        "description": "Delete a block folder. This action is irreversible. The blocks within the folder are NOT deleted.",
        "operationId": "deleteBlockFolder",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted the block folder.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Block Folder"
        ],
        "summary": "Update Block Folder",
        "description": "Update the block folder metadata. Check the schema for the available fields.",
        "operationId": "updateBlockFolder",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/paths/~1blockfolder/get/responses/200/content/application~1json/schema/oneOf/0"
                  },
                  {
                    "type": "object",
                    "title": "Block Folder - GR 0",
                    "properties": {
                      "identifier": {
                        "type": "string",
                        "example": "blockfolder",
                        "readOnly": true
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated the block folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1blockfolder/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/world/blockfolders": {
      "post": {
        "tags": [
          "Block Folder"
        ],
        "summary": "List Block Folders By World",
        "description": "Retrieve a list of block folders within a world. Use offset to skip the first n elements of the result, and limit to specify the maximum number of elements to retrieve.",
        "operationId": "listBlockFoldersByWorld",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of block folder metadata resources within the limit at the offset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1blockfolder/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/blocktemplate": {
      "get": {
        "tags": [
          "Block Template"
        ],
        "summary": "Read Block Template",
        "description": "Retrieve a statblock template by id. Use the granularity parameter to determine the amount of data returned.",
        "operationId": "readBlockTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "1",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1blocktemplate/put/responses/200/content/application~1json/schema"
                        },
                        {
                          "type": "object",
                          "title": "Block Template - GR -1",
                          "properties": {
                            "isEditable": {
                              "type": "string",
                              "nullable": true,
                              "readOnly": true
                            },
                            "success": {
                              "type": "string",
                              "nullable": true,
                              "readOnly": true
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1blocktemplate/get/responses/200/content/application~1json/schema/oneOf/0"
                        },
                        {
                          "type": "object",
                          "title": "Block Template - GR 0",
                          "description": "Metadata of a statblock template.",
                          "properties": {
                            "listtitle": {
                              "type": "string",
                              "nullable": true
                            },
                            "identifier": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string",
                              "nullable": true
                            },
                            "articleTemplate": {
                              "type": "string",
                              "nullable": true
                            },
                            "formSchemaParser": {
                              "type": "string",
                              "enum": [
                                "json",
                                "yaml"
                              ]
                            },
                            "formSchema": {
                              "oneOf": [
                                {
                                  "type": "string",
                                  "format": "json"
                                },
                                {
                                  "type": "string",
                                  "format": "yaml"
                                }
                              ]
                            },
                            "formDisplayStructure": {
                              "type": "string",
                              "nullable": true,
                              "format": "twig"
                            },
                            "displayStructure": {
                              "type": "string",
                              "nullable": true,
                              "format": "twig"
                            },
                            "displayBadge": {
                              "type": "string",
                              "nullable": true,
                              "format": "twig"
                            },
                            "displayStyling": {
                              "type": "string",
                              "nullable": true,
                              "format": "css"
                            },
                            "displayScripting": {
                              "type": "string",
                              "nullable": true
                            },
                            "displayTrackable": {
                              "type": "string",
                              "nullable": true,
                              "format": "twig"
                            },
                            "displayStylingRaw": {
                              "type": "string",
                              "nullable": true,
                              "format": "css"
                            },
                            "hasRawJson": {
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1blocktemplate/get/responses/200/content/application~1json/schema/oneOf/1"
                        },
                        {
                          "type": "object",
                          "title": "Block Template - GR 1",
                          "description": "Metadata of a statblock template returned with granularity 1.",
                          "properties": {
                            "isShared": {
                              "type": "boolean"
                            },
                            "isSharedWithPlayers": {
                              "type": "boolean"
                            },
                            "heroesEnabled": {
                              "type": "boolean"
                            },
                            "systemMeta": {
                              "type": "string",
                              "nullable": true,
                              "format": "json"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1blocktemplate/get/responses/200/content/application~1json/schema/oneOf/2"
                        },
                        {
                          "type": "object",
                          "title": "Block Template - GR 2",
                          "description": "Metadata of a statblock template returned with granularity 2.",
                          "properties": {
                            "parts": {
                              "type": "array",
                              "items": {
                                "$ref": "#/paths/~1blocktemplatepart/put/responses/200/content/application~1json/schema"
                              }
                            },
                            "RPGSRD": {
                              "$ref": "#/paths/~1rpgsystem/get/responses/200/content/application~1json/schema/oneOf/0"
                            },
                            "author": {
                              "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Block Template"
        ],
        "summary": "Create Block Template",
        "description": "Create a new statblock template. Check the schema for the required and optional fields.",
        "operationId": "createBlockTemplate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/paths/~1blocktemplate/get/responses/200/content/application~1json/schema/oneOf/1"
                  },
                  {
                    "type": "object",
                    "title": "Block Template - Create",
                    "description": "All the fields that can be set on a statblock template when creating it.",
                    "required": [
                      "title",
                      "formSchemaParser",
                      "formSchema",
                      "RPGSRD"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created statblock template.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Block Template",
                  "description": "Basic identifing metadata of a statblock template.",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                    },
                    "title": {
                      "type": "string",
                      "example": "Block Template"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "state": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "isWip": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "isDraft": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "BlockTemplate"
                      ],
                      "readOnly": true
                    },
                    "icon": {
                      "type": "string",
                      "enum": [
                        "fa-solid fa-box-archive"
                      ],
                      "readOnly": true
                    },
                    "url": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "subscribergroups": {
                      "type": "array",
                      "readOnly": true,
                      "example": [],
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      }
                    },
                    "folderId": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "tags": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Block Template"
        ],
        "summary": "Delete Block Template",
        "description": "Delete a statblock template. This will also delete all the statblock template parts that belong to this statblock template. This action cannot be undone.",
        "operationId": "deleteBlockTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted statblock template.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Block Template"
        ],
        "summary": "Update Block Template",
        "description": "Update a statblock template. Check the schema for the required and optional fields.",
        "operationId": "updateBlockTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/paths/~1blocktemplate/get/responses/200/content/application~1json/schema/oneOf/1"
                  },
                  {
                    "type": "object",
                    "title": "Block Template - Update",
                    "description": "All the fields that can be updated on a statblock template."
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated statblock template.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1blocktemplate/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/user/blocktemplates": {
      "post": {
        "tags": [
          "Block Template"
        ],
        "summary": "List Block Templates By User",
        "description": "Retrieve a list of statblock templates by user. This endpoint is paginated.",
        "operationId": "listBlockTemplatesByUser",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of statblock templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1blocktemplate/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/blocktemplatepart": {
      "get": {
        "tags": [
          "Block Template Part"
        ],
        "summary": "Read Block Template Part",
        "description": "Read a statblock template part.",
        "operationId": "readBlockTemplatePart",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a statblock template part.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1blocktemplatepart/get/responses/200/content/application~1json/schema/oneOf/1"
                        },
                        {
                          "type": "object",
                          "title": "Block Template Part - GR 2",
                          "description": "Full schema of a statblock template part.",
                          "properties": {
                            "template": {
                              "$ref": "#/paths/~1blocktemplate/put/responses/200/content/application~1json/schema"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1blocktemplatepart/get/responses/200/content/application~1json/schema/oneOf/2"
                        },
                        {
                          "type": "object",
                          "title": "Block Template Part - GR 0",
                          "description": "Full metadata of a statblock template part.",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "string"
                              ]
                            },
                            "description": {
                              "type": "string"
                            },
                            "placeholder": {
                              "type": "string",
                              "nullable": true
                            },
                            "required": {
                              "type": "integer",
                              "enum": [
                                0,
                                1
                              ]
                            },
                            "cssClass": {
                              "type": "string",
                              "nullable": true
                            },
                            "position": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "section": {
                              "type": "string",
                              "nullable": true
                            },
                            "rows": {
                              "type": "integer",
                              "format": "int32",
                              "nullable": true
                            },
                            "renderer": {
                              "type": "string",
                              "nullable": true
                            },
                            "min": {
                              "type": "integer",
                              "format": "int32",
                              "nullable": true
                            },
                            "max": {
                              "type": "integer",
                              "format": "int32",
                              "nullable": true
                            },
                            "options": {
                              "type": "string",
                              "nullable": true
                            },
                            "trackable": {
                              "type": "string",
                              "nullable": true
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1blocktemplatepart/put/responses/200/content/application~1json/schema"
                        },
                        {
                          "type": "object",
                          "title": "Block Template Part - GR -1",
                          "description": "Basic identifing metadata of a statblock template part.",
                          "properties": {
                            "isEditable": {
                              "type": "string",
                              "nullable": true,
                              "readOnly": true
                            },
                            "success": {
                              "type": "string",
                              "nullable": true,
                              "readOnly": true
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Block Template Part"
        ],
        "summary": "Create Block Template Part",
        "description": "Create a statblock template part. Check the schema of the block template to see which fields are required and which are optional.",
        "operationId": "createBlockTemplatePart",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/paths/~1blocktemplatepart/patch/requestBody/content/application~1json/schema"
                  },
                  {
                    "type": "object",
                    "title": "Block Template Part - Create",
                    "description": "Create schema of a statblock template part.",
                    "required": [
                      "title",
                      "type",
                      "template"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created statblock template part.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Block Template Part",
                  "description": "Basic identifing metadata of a statblock template part.",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                    },
                    "title": {
                      "type": "string",
                      "example": "Block Template"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "state": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "isWip": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "isDraft": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "BlockTemplatePart"
                      ],
                      "readOnly": true
                    },
                    "icon": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "url": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "subscribergroups": {
                      "type": "array",
                      "readOnly": true,
                      "example": [],
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      }
                    },
                    "folderId": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "tags": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Block Template Part"
        ],
        "summary": "Delete Block Template Part",
        "description": "Delete a statblock template part. This action cannot be undone.",
        "operationId": "deleteBlockTemplatePart",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statblock template part deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Block Template Part"
        ],
        "summary": "Update Block Template Part",
        "description": "Update a statblock template part. Check the schema of the block template to see all the fields that can be updated.",
        "operationId": "updateBlockTemplatePart",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/paths/~1blocktemplatepart/get/responses/200/content/application~1json/schema/oneOf/1"
                  },
                  {
                    "type": "object",
                    "title": "Block Template Part - Update",
                    "description": "Update schema of a statblock template part.",
                    "properties": {
                      "template": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated statblock template part.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1blocktemplatepart/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/blocktemplate/blocktemplateparts": {
      "post": {
        "tags": [
          "Block Template Part"
        ],
        "summary": "List Block Template Parts By BlockTemplate",
        "description": "Retrieve a list of statblock template parts by blocktemplate. This endpoint is paginated. You can get the part directly from the blocke template get endpoint on granularity 2.",
        "operationId": "listBlockTemplatePartsByBlocktemplate",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of statblock template parts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1blocktemplatepart/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/category": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Read Category",
        "description": "Retrieve the metadata, content and relationships of a category. The returned fields are determined by the granularity parameter. Check the schemas for details.",
        "operationId": "readCategory",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "1",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested category.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1category/put/responses/200/content/application~1json/schema"
                        },
                        {
                          "type": "object",
                          "title": "Category - GR -1",
                          "properties": {
                            "isEditable": {
                              "type": "boolean",
                              "example": true,
                              "readOnly": true
                            },
                            "success": {
                              "type": "boolean",
                              "example": true,
                              "readOnly": true
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1category/get/responses/200/content/application~1json/schema/oneOf/0"
                        },
                        {
                          "type": "object",
                          "title": "Category - GR 0",
                          "description": "The basic schema with some additional metadata and content properties.",
                          "properties": {
                            "description": {
                              "type": "string",
                              "example": "Description"
                            },
                            "excerpt": {
                              "type": "string",
                              "example": "A short teaser."
                            },
                            "isBook": {
                              "type": "boolean",
                              "example": false
                            },
                            "displayBookTitle": {
                              "type": "boolean",
                              "example": true
                            },
                            "isCollapsed": {
                              "type": "boolean",
                              "example": false
                            },
                            "position": {
                              "type": "integer",
                              "example": 1000
                            },
                            "creationDate": {
                              "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                            },
                            "views": {
                              "type": "integer",
                              "example": null,
                              "readOnly": true
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1category/get/responses/200/content/application~1json/schema/oneOf/1"
                        },
                        {
                          "type": "object",
                          "title": "Category - GR 1",
                          "description": "The extended schema that returns the custom content columns, the css classes and the display structure.",
                          "properties": {
                            "custom1": {
                              "type": "string",
                              "example": "Custom Content 1"
                            },
                            "custom2": {
                              "type": "string",
                              "example": "Custom Content 2"
                            },
                            "custom3": {
                              "type": "string",
                              "example": "Custom Content 3"
                            },
                            "custom4": {
                              "type": "string",
                              "example": "Custom Content 4"
                            },
                            "custom5": {
                              "type": "string",
                              "example": "Custom Content 5"
                            },
                            "cssClasses": {
                              "type": "string",
                              "example": "additional-css-class"
                            },
                            "systemMeta": {
                              "type": "string",
                              "format": "json"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1category/get/responses/200/content/application~1json/schema/oneOf/2"
                        },
                        {
                          "type": "object",
                          "title": "Category - GR 2",
                          "description": "This stage adds the relationships of the category to other resources.",
                          "properties": {
                            "pagecover": {
                              "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                            },
                            "bookcover": {
                              "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                            },
                            "defaultarticlecover": {
                              "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                            },
                            "parent": {
                              "$ref": "#/paths/~1category/put/responses/200/content/application~1json/schema"
                            },
                            "world": {
                              "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                            },
                            "articleRedirect": {
                              "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                            },
                            "editURL": {
                              "type": "string",
                              "example": "http://www.worldanvil.com/world/category/<category-id>/edit",
                              "readOnly": true
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Category"
        ],
        "summary": "Create Category",
        "description": "Create a new category. Required parameters for the creation of this entity are \"title\" and \"world\".",
        "operationId": "createCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/paths/~1category/patch/requestBody/content/application~1json/schema"
                  },
                  {
                    "type": "object",
                    "title": "Category - Create",
                    "description": "All the properties which can be set when creating a new category. The world and the title are required.",
                    "required": [
                      "title",
                      "world"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The reference to the newly created category.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Category",
                  "description": "Basic identifing metadata of a category.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "readOnly": true
                    },
                    "title": {
                      "type": "string",
                      "example": "Category Title"
                    },
                    "slug": {
                      "type": "string",
                      "example": "category-title-category",
                      "readOnly": true
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "private",
                        "public"
                      ]
                    },
                    "isWip": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "isDraft": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "Category"
                      ],
                      "readOnly": true
                    },
                    "icon": {
                      "type": "string",
                      "example": "fa-solid fa-folder"
                    },
                    "url": {
                      "type": "string",
                      "example": "http://www.worldanvil.com/w/<world-slug>/c/<category-slug>",
                      "readOnly": true
                    },
                    "subscribergroups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      },
                      "example": []
                    },
                    "folderId": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "tags": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Category"
        ],
        "summary": "Delete Category",
        "description": "Delete a category and all its content. This action is irreversible.",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Category"
        ],
        "summary": "Update Category",
        "description": "Update the metadata, content and relationships of a category. Check the schemas for the fields that can be updated.",
        "operationId": "updateCategory",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/paths/~1category/get/responses/200/content/application~1json/schema/oneOf/2"
                  },
                  {
                    "type": "object",
                    "title": "Category - Update",
                    "description": "All the properties that can be updated on a category.",
                    "properties": {
                      "subscribergroups": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid",
                              "example": "00000000-0000-0000-0000-000000000000"
                            }
                          }
                        }
                      },
                      "pagecover": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int32",
                            "example": 20123
                          }
                        }
                      },
                      "bookcover": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int32",
                            "example": 20123
                          }
                        }
                      },
                      "defaultarticlecover": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int32",
                            "example": 20123
                          }
                        }
                      },
                      "parent": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "example": "00000000-0000-0000-0000-000000000000"
                          }
                        }
                      },
                      "world": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "example": "00000000-0000-0000-0000-000000000000"
                          }
                        }
                      },
                      "articleRedirect": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "example": "00000000-0000-0000-0000-000000000000"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated category.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1category/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/world/categories": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "List Categories By World",
        "description": "Retrieve a list of categories within a world. Use offset to skip the first n elements of the result, and limit to specify the maximum number of elements to retrieve.",
        "operationId": "listCategoriesByWorld",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of category metadata resources within the limit at the offset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1category/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/canvas": {
      "get": {
        "tags": [
          "Canvas"
        ],
        "summary": "Read Canvas",
        "description": "Retrieve the metadata of a single whiteboard. The returned fields depend on the given granularity.",
        "operationId": "readCanvas",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The whiteboard metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1canvas/put/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "title": "Canvas Schema - GR 0",
                      "description": "Full metadata and content of a canvas.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Canvas Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "public",
                            "private"
                          ]
                        },
                        "isWip": {
                          "type": "string",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "string",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Canvas"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-chalkboard"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "example": "-1"
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "data": {
                          "type": "object",
                          "description": "Canvas data to render the canvas. To update / create need to figure out how to handle these elements.",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "name": {
                              "type": "string",
                              "example": "Canvas Title"
                            },
                            "uuid": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "pages": {
                              "type": "object",
                              "properties": {
                                "page": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "example": "page"
                                    },
                                    "name": {
                                      "type": "string",
                                      "example": "Page 1"
                                    },
                                    "shapes": {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "patternProperties": {
                                        "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
                                          "type": "object",
                                          "description": "A shape object.",
                                          "properties": {
                                            "oneOf": [
                                              {
                                                "id": {
                                                  "type": "string",
                                                  "format": "uuid"
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "example": "Draw"
                                                },
                                                "type": {
                                                  "type": "string",
                                                  "example": "draw"
                                                },
                                                "point": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  }
                                                },
                                                "style": {
                                                  "type": "object",
                                                  "properties": {
                                                    "dash": {
                                                      "type": "string",
                                                      "example": "solid"
                                                    },
                                                    "size": {
                                                      "type": "string",
                                                      "example": "small"
                                                    },
                                                    "color": {
                                                      "type": "string",
                                                      "example": "#000000"
                                                    },
                                                    "scale": {
                                                      "type": "integer",
                                                      "format": "int32",
                                                      "example": 1
                                                    },
                                                    "bgColor": {
                                                      "type": "string",
                                                      "example": "#ffffff"
                                                    },
                                                    "isFilled": {
                                                      "type": "boolean"
                                                    }
                                                  }
                                                },
                                                "points": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "array",
                                                    "items": {
                                                      "oneOf": [
                                                        {
                                                          "type": "integer"
                                                        },
                                                        {
                                                          "type": "number"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "example": [
                                                    [
                                                      3,
                                                      349,
                                                      0.5
                                                    ],
                                                    [
                                                      3,
                                                      349,
                                                      0.5
                                                    ],
                                                    [
                                                      0,
                                                      347,
                                                      0.5
                                                    ]
                                                  ]
                                                },
                                                "parentId": {
                                                  "type": "string",
                                                  "example": "page"
                                                },
                                                "rotation": {
                                                  "type": "integer",
                                                  "format": "int32",
                                                  "example": 0
                                                },
                                                "childIndex": {
                                                  "type": "integer",
                                                  "format": "int32",
                                                  "example": 1
                                                },
                                                "isComplete": {
                                                  "type": "boolean"
                                                }
                                              },
                                              {
                                                "id": {
                                                  "type": "string",
                                                  "format": "uuid"
                                                },
                                                "bend": {
                                                  "type": "integer",
                                                  "format": "int32",
                                                  "example": 0
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "example": "Arrow"
                                                },
                                                "type": {
                                                  "type": "string",
                                                  "example": "arrow"
                                                },
                                                "label": {
                                                  "type": "string",
                                                  "example": null
                                                },
                                                "point": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  }
                                                },
                                                "style": {
                                                  "$ref": "#/paths/~1canvas/get/responses/200/content/application~1json/schema/oneOf/1/properties/data/properties/pages/properties/page/properties/shapes/patternProperties/%5E%5B0-9a-f%5D%7B8%7D-%5B0-9a-f%5D%7B4%7D-%5B0-9a-f%5D%7B4%7D-%5B0-9a-f%5D%7B4%7D-%5B0-9a-f%5D%7B12%7D%24/properties/oneOf/0/style"
                                                },
                                                "handles": {
                                                  "type": "object",
                                                  "properties": {
                                                    "end": {
                                                      "type": "object",
                                                      "properties": {
                                                        "id": {
                                                          "type": "string",
                                                          "example": "end"
                                                        },
                                                        "index": {
                                                          "type": "integer",
                                                          "format": "int32",
                                                          "example": 1
                                                        },
                                                        "point": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                          }
                                                        },
                                                        "canBind": {
                                                          "type": "boolean"
                                                        }
                                                      }
                                                    },
                                                    "bend": {
                                                      "type": "object",
                                                      "properties": {
                                                        "id": {
                                                          "type": "string",
                                                          "example": "bend"
                                                        },
                                                        "index": {
                                                          "type": "integer",
                                                          "format": "int32",
                                                          "example": 2
                                                        },
                                                        "point": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "start": {
                                                      "type": "object",
                                                      "properties": {
                                                        "id": {
                                                          "type": "string",
                                                          "example": "start"
                                                        },
                                                        "index": {
                                                          "type": "integer",
                                                          "format": "int32",
                                                          "example": 0
                                                        },
                                                        "point": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object",
                                                            "properties": null
                                                          },
                                                          "example": []
                                                        },
                                                        "canBind": {
                                                          "type": "boolean"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "parentId": {
                                                  "type": "string",
                                                  "example": "page"
                                                },
                                                "rotation": {
                                                  "type": "integer",
                                                  "format": "int32",
                                                  "example": 0
                                                },
                                                "childIndex": {
                                                  "type": "integer",
                                                  "format": "int32",
                                                  "example": 4
                                                },
                                                "labelPoint": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "number"
                                                  }
                                                },
                                                "decorations": {
                                                  "type": "object",
                                                  "properties": {
                                                    "end": {
                                                      "type": "string",
                                                      "example": "arrow"
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "id": {
                                                  "type": "string",
                                                  "format": "uuid"
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "example": "Sticky"
                                                },
                                                "size": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  }
                                                },
                                                "text": {
                                                  "type": "string",
                                                  "example": "A note to myself"
                                                },
                                                "type": {
                                                  "type": "string",
                                                  "example": "sticky"
                                                },
                                                "point": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  }
                                                },
                                                "style": {
                                                  "$ref": "#/paths/~1canvas/get/responses/200/content/application~1json/schema/oneOf/1/properties/data/properties/pages/properties/page/properties/shapes/patternProperties/%5E%5B0-9a-f%5D%7B8%7D-%5B0-9a-f%5D%7B4%7D-%5B0-9a-f%5D%7B4%7D-%5B0-9a-f%5D%7B4%7D-%5B0-9a-f%5D%7B12%7D%24/properties/oneOf/0/style"
                                                },
                                                "parentId": {
                                                  "type": "string",
                                                  "example": "page"
                                                },
                                                "rotation": {
                                                  "type": "integer",
                                                  "format": "int32",
                                                  "example": 0
                                                },
                                                "childIndex": {
                                                  "type": "integer",
                                                  "format": "int32",
                                                  "example": 6
                                                }
                                              },
                                              {
                                                "id": {
                                                  "type": "string",
                                                  "example": "7b2ce8d7-064c-40c9-08eb-a23fe30b9b0f"
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "example": "Text"
                                                },
                                                "text": {
                                                  "type": "string",
                                                  "example": "Hello Warheads"
                                                },
                                                "type": {
                                                  "type": "string",
                                                  "example": "text"
                                                },
                                                "point": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": null
                                                  },
                                                  "example": []
                                                },
                                                "style": {
                                                  "type": "object",
                                                  "properties": {
                                                    "dash": {
                                                      "type": "string",
                                                      "example": "solid"
                                                    },
                                                    "size": {
                                                      "type": "string",
                                                      "example": "small"
                                                    },
                                                    "color": {
                                                      "type": "string",
                                                      "example": "#000000"
                                                    },
                                                    "scale": {
                                                      "type": "integer",
                                                      "format": "int32",
                                                      "example": 1
                                                    },
                                                    "bgColor": {
                                                      "type": "string",
                                                      "example": "#ffffff"
                                                    },
                                                    "isFilled": {
                                                      "type": "boolean"
                                                    },
                                                    "font": {
                                                      "type": "string",
                                                      "example": "sans"
                                                    },
                                                    "textAlign": {
                                                      "type": "string",
                                                      "example": "middle"
                                                    }
                                                  }
                                                },
                                                "parentId": {
                                                  "type": "string",
                                                  "example": "page"
                                                },
                                                "rotation": {
                                                  "type": "integer",
                                                  "format": "int32",
                                                  "example": 0
                                                },
                                                "childIndex": {
                                                  "type": "integer",
                                                  "format": "int32",
                                                  "example": 5
                                                }
                                              },
                                              {
                                                "id": {
                                                  "type": "string",
                                                  "format": "uuid"
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "example": "Block"
                                                },
                                                "size": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  }
                                                },
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "block"
                                                  ]
                                                },
                                                "asset": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "type": "string",
                                                      "format": "uuid"
                                                    },
                                                    "src": {
                                                      "type": "string"
                                                    },
                                                    "size": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      }
                                                    },
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "block"
                                                      ]
                                                    },
                                                    "block": {
                                                      "type": "object",
                                                      "properties": {
                                                        "uuid": {
                                                          "type": "string",
                                                          "format": "uuid"
                                                        },
                                                        "tlUrl": {
                                                          "type": "string"
                                                        },
                                                        "tlIcon": {
                                                          "type": "string"
                                                        },
                                                        "excerpt": {
                                                          "type": "string"
                                                        },
                                                        "rawData": {
                                                          "type": "object",
                                                          "description": "This is the raw data of the selected resource of this block. It is a JSON object that can be used to render the resource in the frontend. The properties\npresent depend on the type of resource. The id property is always present and is the id of the resource.\n",
                                                          "properties": {
                                                            "id": {
                                                              "type": "string",
                                                              "format": "uuid"
                                                            }
                                                          }
                                                        },
                                                        "tlTitle": {
                                                          "type": "string"
                                                        },
                                                        "template": {
                                                          "type": "string",
                                                          "enum": [
                                                            "Event"
                                                          ]
                                                        },
                                                        "tlWaType": {
                                                          "type": "string",
                                                          "enum": [
                                                            "events"
                                                          ]
                                                        },
                                                        "blockType": {
                                                          "type": "string",
                                                          "enum": [
                                                            "DEFAULT"
                                                          ]
                                                        },
                                                        "tlBgColor": {
                                                          "type": "string",
                                                          "example": "#000000"
                                                        },
                                                        "tlShowText": {
                                                          "type": "boolean"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "point": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  }
                                                },
                                                "style": {
                                                  "$ref": "#/paths/~1canvas/get/responses/200/content/application~1json/schema/oneOf/1/properties/data/properties/pages/properties/page/properties/shapes/patternProperties/%5E%5B0-9a-f%5D%7B8%7D-%5B0-9a-f%5D%7B4%7D-%5B0-9a-f%5D%7B4%7D-%5B0-9a-f%5D%7B4%7D-%5B0-9a-f%5D%7B12%7D%24/properties/oneOf/0/style"
                                                },
                                                "assetId": {
                                                  "type": "string",
                                                  "example": "assetId"
                                                },
                                                "maxWidth": {
                                                  "type": "integer",
                                                  "format": "int32",
                                                  "example": 640
                                                },
                                                "minWidth": {
                                                  "type": "integer",
                                                  "format": "int32",
                                                  "example": 320
                                                },
                                                "parentId": {
                                                  "type": "string",
                                                  "example": "page"
                                                },
                                                "rotation": {
                                                  "type": "integer",
                                                  "format": "int32",
                                                  "example": 0
                                                },
                                                "maxHeight": {
                                                  "type": "integer",
                                                  "format": "int32",
                                                  "example": 384
                                                },
                                                "minHeight": {
                                                  "type": "integer",
                                                  "format": "int32",
                                                  "example": 192
                                                },
                                                "childIndex": {
                                                  "type": "integer",
                                                  "format": "int32",
                                                  "example": 8
                                                }
                                              },
                                              {
                                                "id": {
                                                  "type": "string",
                                                  "format": "uuid"
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "enum": [
                                                    "Rectangle"
                                                  ]
                                                },
                                                "size": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  }
                                                },
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "rectangle"
                                                  ]
                                                },
                                                "label": {
                                                  "type": "string"
                                                },
                                                "point": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  }
                                                },
                                                "style": {
                                                  "$ref": "#/paths/~1canvas/get/responses/200/content/application~1json/schema/oneOf/1/properties/data/properties/pages/properties/page/properties/shapes/patternProperties/%5E%5B0-9a-f%5D%7B8%7D-%5B0-9a-f%5D%7B4%7D-%5B0-9a-f%5D%7B4%7D-%5B0-9a-f%5D%7B4%7D-%5B0-9a-f%5D%7B12%7D%24/properties/oneOf/0/style"
                                                },
                                                "parentId": {
                                                  "type": "string",
                                                  "example": "page"
                                                },
                                                "rotation": {
                                                  "type": "integer",
                                                  "format": "int32",
                                                  "example": 0
                                                },
                                                "childIndex": {
                                                  "type": "integer",
                                                  "format": "int32",
                                                  "example": 3
                                                },
                                                "labelPoint": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "state": {
                              "type": "string",
                              "example": [
                                "private",
                                "public"
                              ]
                            },
                            "title": {
                              "type": "string",
                              "example": "Canvas Title"
                            },
                            "assets": {
                              "type": "array",
                              "items": {},
                              "example": []
                            },
                            "version": {
                              "type": "integer",
                              "format": "int32",
                              "example": 16
                            },
                            "settings": {
                              "type": "object",
                              "properties": {
                                "showGrid": {
                                  "type": "boolean"
                                },
                                "isPenMode": {
                                  "type": "boolean"
                                },
                                "isDarkMode": {
                                  "type": "boolean"
                                },
                                "isSnapping": {
                                  "type": "boolean"
                                },
                                "isZoomSnap": {
                                  "type": "boolean"
                                },
                                "isDebugMode": {
                                  "type": "boolean"
                                },
                                "isFocusMode": {
                                  "type": "boolean"
                                },
                                "isReadonlyMode": {
                                  "type": "boolean"
                                },
                                "showCloneHandles": {
                                  "type": "boolean"
                                },
                                "showRotateHandles": {
                                  "type": "boolean"
                                },
                                "nudgeDistanceLarge": {
                                  "type": "integer",
                                  "format": "int32",
                                  "example": 16
                                },
                                "nudgeDistanceSmall": {
                                  "type": "integer",
                                  "format": "int32",
                                  "example": 1
                                },
                                "showBindingHandles": {
                                  "type": "boolean"
                                }
                              }
                            },
                            "pageStates": {
                              "type": "object",
                              "properties": {
                                "page": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "example": "page"
                                    },
                                    "camera": {
                                      "type": "object",
                                      "properties": {
                                        "zoom": {
                                          "type": "integer",
                                          "format": "int32",
                                          "example": 1
                                        },
                                        "point": {
                                          "type": "array",
                                          "items": {
                                            "type": "integer",
                                            "format": "int32"
                                          }
                                        }
                                      }
                                    },
                                    "editingId": {
                                      "type": "string",
                                      "format": "uuid"
                                    },
                                    "hoveredId": {
                                      "type": "string",
                                      "format": "uuid"
                                    },
                                    "selectedIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "format": "uuid"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "userSettings": {
                              "type": "object",
                              "properties": {
                                "tlBgColor": {
                                  "type": "string",
                                  "format": "hexcolor",
                                  "example": "#000000"
                                },
                                "tlShowText": {
                                  "type": "boolean"
                                },
                                "recentIcons": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "DANGEROUSLY_SET_CSS": {
                                  "type": "object",
                                  "properties": {
                                    "cursor": {
                                      "type": "string",
                                      "example": "unset"
                                    }
                                  }
                                }
                              }
                            },
                            "subscribergroups": {
                              "type": "array",
                              "items": {
                                "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                              },
                              "example": []
                            }
                          }
                        },
                        "isEditable": {
                          "type": "boolean"
                        },
                        "success": {
                          "type": "boolean"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Canvas Schema - GR 2",
                      "description": "Full metadata and content of a canvas and its relationships.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Canvas Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "public",
                            "private"
                          ]
                        },
                        "isWip": {
                          "type": "string",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "string",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Canvas"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-chalkboard"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "example": "-1"
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "data": {
                          "$ref": "#/paths/~1canvas/get/responses/200/content/application~1json/schema/oneOf/1/properties/data"
                        },
                        "author": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                        },
                        "world": {
                          "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                        },
                        "isEditable": {
                          "type": "boolean"
                        },
                        "success": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Canvas"
        ],
        "summary": "Create Canvas",
        "description": "Create a new whiteboard. Required parameters for the creation of this entity are \"title\" and \"world\".",
        "operationId": "createCanvas",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the newly created whiteboard.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Canvas Schema - GR -1",
                  "description": "Core metadata of a canvas resource.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "title": {
                      "type": "string",
                      "example": "Canvas Title"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "public",
                        "private"
                      ]
                    },
                    "isWip": {
                      "type": "string",
                      "nullable": true
                    },
                    "isDraft": {
                      "type": "string",
                      "nullable": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "Canvas"
                      ]
                    },
                    "icon": {
                      "type": "string",
                      "enum": [
                        "fa-solid fa-chalkboard"
                      ]
                    },
                    "url": {
                      "type": "string",
                      "nullable": true
                    },
                    "subscribergroups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      },
                      "example": []
                    },
                    "folderId": {
                      "type": "string",
                      "example": "-1"
                    },
                    "tags": {
                      "type": "string",
                      "nullable": true
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    },
                    "isEditable": {
                      "type": "boolean",
                      "example": true,
                      "readOnly": true
                    },
                    "success": {
                      "type": "boolean",
                      "example": true,
                      "readOnly": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Canvas"
        ],
        "summary": "Delete Canvas",
        "description": "Delete a whiteboard. This process is not reversible.",
        "operationId": "deleteCanvas",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Whiteboard was deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Canvas"
        ],
        "summary": "Update Canvas",
        "description": "Update a whiteboard metadata and its content.",
        "operationId": "updateCanvas",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The reference object of the updated whiteboard.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1canvas/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/world/canvases": {
      "post": {
        "tags": [
          "Canvas"
        ],
        "summary": "List Canvases By World",
        "description": "Retrieve a list of canvases within a world. Use offset to skip the first n elements of the result, and limit to specify the maximum number of elements to retrieve.",
        "operationId": "listCanvasesByWorld",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of canvas metadata resources within the limit at the offset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1canvas/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/rpgsystem": {
      "get": {
        "tags": [
          "RPG System"
        ],
        "summary": "Read RPG System",
        "description": "Retrieve the metadata of a single RPG system. The returned fields depend on the give granularity.",
        "operationId": "readRpgSystem",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The RPG system object. The included fields depend on the chosen granularity.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "RPG System Reference Schema - GR -1",
                      "description": "The reference schema for a rpg system. Only contains the minimum amount of information to identify the rpg system.",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int32",
                          "example": 500
                        },
                        "title": {
                          "type": "string",
                          "example": "Essence and Energy"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "nullable": true
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "RPGSRD"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-chess-rook-piece"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "example": [],
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          }
                        },
                        "folderId": {
                          "type": "string",
                          "nullable": true
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "RPG System Reference Schema - GR -1",
                      "description": "The reference schema for a rpg system. Only contains the minimum amount of information to identify the rpg system.",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int32",
                          "example": 500
                        },
                        "title": {
                          "type": "string",
                          "example": "Essence and Energy"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "nullable": true
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "RPGSRD"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-chess-rook-piece"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "example": [],
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          }
                        },
                        "folderId": {
                          "type": "string",
                          "nullable": true
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "reference": {
                          "type": "string",
                          "example": "ene"
                        },
                        "description": {
                          "type": "string"
                        },
                        "publisher": {
                          "type": "string",
                          "example": "Pack Goblin Games"
                        },
                        "copyright": {
                          "type": "string",
                          "example": "Pack Goblin Games, Alexander Foerster"
                        },
                        "logo": {
                          "type": "string",
                          "nullable": true
                        },
                        "styles": {
                          "type": "string",
                          "nullable": true
                        },
                        "heroesEnabled": {
                          "type": "boolean"
                        },
                        "weight": {
                          "type": "string",
                          "nullable": true
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/rpgsystems": {
      "post": {
        "tags": [
          "RPG System"
        ],
        "summary": "List RPG Systems",
        "description": "Retrieve a list of rpg systems.",
        "operationId": "listRpgSystems",
        "responses": {
          "200": {
            "description": "All the rpg systems available on World Anvil.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1rpgsystem/get/responses/200/content/application~1json/schema/oneOf/0"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/timeline": {
      "get": {
        "tags": [
          "Timeline"
        ],
        "summary": "Read Timeline",
        "description": "Retrieve the metadata, content and relations of a timeline. The granularity determines the fields included in the returned object.",
        "operationId": "readTimeline",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "1",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The timeline object.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1timeline/put/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "title": "Timeline Reference Schema - GR 0",
                      "description": "Adds all of the metadata and content fields to the timeline.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Test Timeline Creation"
                        },
                        "slug": {
                          "type": "string",
                          "example": "test-timeline-creation-timeline"
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "public",
                            "private"
                          ]
                        },
                        "isWip": {
                          "type": "boolean"
                        },
                        "isDraft": {
                          "type": "boolean"
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Timeline"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-timeline"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "example": "http://www.worldanvil.com/w/<world-slug>/t/<timeline-slug>"
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          }
                        },
                        "folderId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "tags": {
                          "type": "string",
                          "example": "tag,tag2"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "description": {
                          "type": "string",
                          "example": "Description"
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "utdOffset": {
                          "type": "string",
                          "example": "0"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "parallel",
                            "master"
                          ]
                        },
                        "showInToc": {
                          "type": "boolean"
                        },
                        "views": {
                          "type": "integer",
                          "format": "int32",
                          "nullable": true
                        },
                        "likes": {
                          "type": "integer",
                          "format": "int32",
                          "nullable": true
                        },
                        "presentationParameters": {
                          "type": "string",
                          "nullable": true
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Timeline Reference Schema - GR 1",
                      "description": "Adds a reference to the world this timeline belongs to.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Test Timeline Creation"
                        },
                        "slug": {
                          "type": "string",
                          "example": "test-timeline-creation-timeline"
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "public",
                            "private"
                          ]
                        },
                        "isWip": {
                          "type": "boolean"
                        },
                        "isDraft": {
                          "type": "boolean"
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Timeline"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-timeline"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "example": "http://www.worldanvil.com/w/<world-slug>/t/<timeline-slug>"
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          }
                        },
                        "folderId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "tags": {
                          "type": "string",
                          "example": "tag,tag2"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "description": {
                          "type": "string",
                          "example": "Description"
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "utdOffset": {
                          "type": "string",
                          "example": "0"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "parallel",
                            "master"
                          ]
                        },
                        "showInToc": {
                          "type": "boolean"
                        },
                        "views": {
                          "type": "integer",
                          "format": "int32",
                          "nullable": true
                        },
                        "likes": {
                          "type": "integer",
                          "format": "int32",
                          "nullable": true
                        },
                        "presentationParameters": {
                          "type": "string",
                          "nullable": true
                        },
                        "world": {
                          "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Timeline Reference Schema - GR 2",
                      "description": "Adds a reference to the world this timeline belongs to.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Test Timeline Creation"
                        },
                        "slug": {
                          "type": "string",
                          "example": "test-timeline-creation-timeline"
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "public",
                            "private"
                          ]
                        },
                        "isWip": {
                          "type": "boolean"
                        },
                        "isDraft": {
                          "type": "boolean"
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Timeline"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-timeline"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "example": "http://www.worldanvil.com/w/<world-slug>/t/<timeline-slug>"
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          }
                        },
                        "folderId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "tags": {
                          "type": "string",
                          "example": "tag,tag2"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "histories": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1history/put/requestBody/content/application~1json/schema"
                          }
                        },
                        "description": {
                          "type": "string",
                          "example": "Description"
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "utdOffset": {
                          "type": "string",
                          "example": "0"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "parallel",
                            "master"
                          ]
                        },
                        "showInToc": {
                          "type": "boolean"
                        },
                        "views": {
                          "type": "integer",
                          "format": "int32",
                          "nullable": true
                        },
                        "likes": {
                          "type": "integer",
                          "format": "int32",
                          "nullable": true
                        },
                        "presentationParameters": {
                          "type": "string",
                          "nullable": true
                        },
                        "world": {
                          "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                        },
                        "article": {
                          "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                        },
                        "category": {
                          "$ref": "#/paths/~1category/put/responses/200/content/application~1json/schema"
                        },
                        "calendar": {
                          "type": "object",
                          "title": "Calendar Reference Schema",
                          "description": "The basic metadata of the calendar.",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "title": {
                              "type": "string",
                              "example": "Test Calendar"
                            },
                            "slug": {
                              "type": "string",
                              "nullable": true
                            },
                            "state": {
                              "type": "string",
                              "nullable": true
                            },
                            "isWip": {
                              "type": "boolean",
                              "nullable": true,
                              "example": null
                            },
                            "isDraft": {
                              "type": "boolean",
                              "nullable": true,
                              "example": null
                            },
                            "entityClass": {
                              "type": "string",
                              "enum": [
                                "Calendar"
                              ]
                            },
                            "icon": {
                              "type": "string",
                              "enum": [
                                "fa-solid fa-calendar-days"
                              ]
                            },
                            "url": {
                              "type": "string",
                              "nullable": true
                            },
                            "subscribergroups": {
                              "type": "array",
                              "items": {
                                "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                              },
                              "example": []
                            },
                            "folderId": {
                              "type": "string",
                              "enum": [
                                "-1"
                              ]
                            },
                            "tags": {
                              "type": "string",
                              "nullable": true,
                              "example": "tag,tag2"
                            },
                            "updateDate": {
                              "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                            }
                          }
                        },
                        "eras": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "title": "Era Reference Schema",
                            "description": "The basic era reference schema with the core metadata",
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "title": {
                                "type": "string",
                                "example": "Test Era"
                              },
                              "slug": {
                                "type": "string",
                                "nullable": true
                              },
                              "state": {
                                "type": "string",
                                "enum": [
                                  "public",
                                  "private"
                                ]
                              },
                              "isWip": {
                                "type": "boolean"
                              },
                              "isDraft": {
                                "type": "boolean"
                              },
                              "entityClass": {
                                "type": "string",
                                "enum": [
                                  "Era"
                                ]
                              },
                              "icon": {
                                "type": "string",
                                "enum": [
                                  "fa-solid fa-timeline"
                                ]
                              },
                              "url": {
                                "type": "string",
                                "nullable": true
                              },
                              "subscribergroups": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                                }
                              },
                              "folderId": {
                                "type": "string",
                                "nullable": true
                              },
                              "tags": {
                                "type": "string",
                                "nullable": true
                              },
                              "updateDate": {
                                "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                              },
                              "isEditable": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "success": {
                                "type": "boolean",
                                "readOnly": true
                              }
                            }
                          }
                        },
                        "author": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Timeline"
        ],
        "summary": "Create Timeline",
        "description": "Create a new timeline. The timeline requires a title and a world id to be created.",
        "operationId": "createTimeline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Timeline Create Schema",
                "description": "All the fields here can be used when creating a timeline and which fields are required.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Test Timeline Creation"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "public",
                      "private"
                    ]
                  },
                  "subscribergroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  },
                  "tags": {
                    "type": "string",
                    "example": "tag,tag2"
                  },
                  "histories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "example": "Description"
                  },
                  "utdOffset": {
                    "type": "string",
                    "example": "0"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "parallel",
                      "master"
                    ]
                  },
                  "showInToc": {
                    "type": "boolean"
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "article": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "category": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "calendar": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "eras": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                },
                "required": [
                  "title",
                  "world"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the reference object of the created timeline.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Timeline Reference Schema - GR -1",
                  "description": "The basic timeline reference schema with the core metadata",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "title": {
                      "type": "string",
                      "example": "Test Timeline Creation"
                    },
                    "slug": {
                      "type": "string",
                      "example": "test-timeline-creation-timeline"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "public",
                        "private"
                      ]
                    },
                    "isWip": {
                      "type": "boolean"
                    },
                    "isDraft": {
                      "type": "boolean"
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "Timeline"
                      ]
                    },
                    "icon": {
                      "type": "string",
                      "enum": [
                        "fa-solid fa-timeline"
                      ]
                    },
                    "url": {
                      "type": "string",
                      "example": "http://www.worldanvil.com/w/<world-slug>/t/<timeline-slug>"
                    },
                    "subscribergroups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      }
                    },
                    "folderId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "tags": {
                      "type": "string",
                      "example": "tag,tag2"
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    },
                    "isEditable": {
                      "type": "boolean",
                      "readOnly": true
                    },
                    "success": {
                      "type": "boolean",
                      "readOnly": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Timeline"
        ],
        "summary": "Delete Timeline",
        "description": "Delete a timeline. This action is irreversible.",
        "operationId": "deleteTimeline",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The timeline was deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Timeline"
        ],
        "summary": "Update Timeline",
        "description": "Update the metadata, content and relationships of a timeline.",
        "operationId": "updateTimeline",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Timeline Update Schema",
                "description": "All the fields here can be updated through the API.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Test Timeline Creation"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "public",
                      "private"
                    ]
                  },
                  "subscribergroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  },
                  "tags": {
                    "type": "string",
                    "example": "tag,tag2"
                  },
                  "histories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "example": "Description"
                  },
                  "utdOffset": {
                    "type": "string",
                    "example": "0"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "parallel",
                      "master"
                    ]
                  },
                  "showInToc": {
                    "type": "boolean"
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "article": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "category": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "calendar": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "eras": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the reference object of the updated timeline.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1timeline/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/world/timelines": {
      "post": {
        "tags": [
          "Timeline"
        ],
        "summary": "List Timelines By World",
        "description": "Retrieve a list of timelines within a world. Use offset to skip the first n elements of the result, and limit to specify the maximum number of elements to retrieve.",
        "operationId": "listTimelinesByWorld",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of timeline metadata resources within the limit at the offset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1timeline/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/history": {
      "get": {
        "tags": [
          "History"
        ],
        "summary": "Read History",
        "description": "Retrieve the metadata and content of a historical event. Fields returned are determined by the granularity.",
        "operationId": "readHistory",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "1",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested historical entry resource.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1history/put/requestBody/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "title": "History Reference Schema - GR 0",
                      "description": "Reference schema with all the metadata of the historical event.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "History Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "private",
                            "public"
                          ]
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "HistoricalEntry"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-calendar-lines-pen"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "example": "https://www.worldanvil.com/w/<world-slug>/h/<id>"
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "nullable": true
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true,
                          "example": "tag1,tag2,tag3"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "significance": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 0,
                          "maximum": 5,
                          "example": 2
                        },
                        "year": {
                          "type": "string",
                          "example": "1"
                        },
                        "month": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "day": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "hour": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "minute": {
                          "type": "string",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "endingYear": {
                          "type": "string",
                          "example": "2"
                        },
                        "endingMonth": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "endingDay": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "endingHour": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "endingMinute": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "lane": {
                          "type": "string",
                          "nullable": true
                        },
                        "backgroundColor": {
                          "type": "string",
                          "nullable": true
                        },
                        "category": {
                          "type": "object",
                          "title": "History Category Schema",
                          "description": "The reference schema for the category within histories. Does not have it its own endpoint.",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "b4060135-b751-4a6a-a14b-22090ba9df5e"
                            },
                            "title": {
                              "type": "string",
                              "example": "Artistic creation"
                            },
                            "slug": {
                              "type": "string",
                              "nullable": true
                            },
                            "state": {
                              "type": "string",
                              "nullable": true
                            },
                            "isWip": {
                              "type": "string",
                              "nullable": true
                            },
                            "isDraft": {
                              "type": "string",
                              "nullable": true
                            },
                            "entityClass": {
                              "type": "string",
                              "enum": [
                                "HistoricalEntryCategory"
                              ]
                            },
                            "icon": {
                              "type": "string",
                              "enum": [
                                "ra ra-3x ra-forging"
                              ]
                            },
                            "url": {
                              "type": "string",
                              "nullable": true
                            },
                            "subscribergroups": {
                              "type": "array",
                              "items": {
                                "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                              },
                              "example": []
                            },
                            "folderId": {
                              "type": "string",
                              "nullable": true
                            },
                            "tags": {
                              "type": "string",
                              "nullable": true
                            },
                            "updateDate": {
                              "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                            }
                          }
                        },
                        "displayRange": {
                          "type": "boolean"
                        },
                        "alternativeDisplayRange": {
                          "type": "string",
                          "example": "Alternative display name"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "History Reference Schema - GR 1",
                      "description": "Reference schema with all the metadata and content of the historical event.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "History Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "private",
                            "public"
                          ]
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "HistoricalEntry"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-calendar-lines-pen"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "example": "https://www.worldanvil.com/w/<world-slug>/h/<id>"
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "nullable": true
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true,
                          "example": "tag1,tag2,tag3"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "significance": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 0,
                          "maximum": 5,
                          "example": 2
                        },
                        "year": {
                          "type": "string",
                          "example": "1"
                        },
                        "month": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "day": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "hour": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "minute": {
                          "type": "string",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "endingYear": {
                          "type": "string",
                          "example": "2"
                        },
                        "endingMonth": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "endingDay": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "endingHour": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "endingMinute": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "lane": {
                          "type": "string",
                          "nullable": true
                        },
                        "backgroundColor": {
                          "type": "string",
                          "nullable": true
                        },
                        "category": {
                          "$ref": "#/paths/~1history/get/responses/200/content/application~1json/schema/oneOf/1/properties/category"
                        },
                        "content": {
                          "type": "string",
                          "example": "Short Description"
                        },
                        "fullcontent": {
                          "type": "string",
                          "example": "Full content"
                        },
                        "displayDateName": {
                          "type": "string",
                          "nullable": true
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "meta": {
                          "type": "string",
                          "nullable": true,
                          "example": "Secret information"
                        },
                        "likes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                          },
                          "nullable": true
                        },
                        "world": {
                          "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                        },
                        "displayRange": {
                          "type": "boolean"
                        },
                        "alternativeDisplayRange": {
                          "type": "string",
                          "example": "Alternative display name"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "History Reference Schema - GR 1",
                      "description": "Reference schema with all the metadata and content of the historical event.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "History Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "private",
                            "public"
                          ]
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "HistoricalEntry"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-calendar-lines-pen"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "example": "https://www.worldanvil.com/w/<world-slug>/h/<id>"
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "nullable": true
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true,
                          "example": "tag1,tag2,tag3"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "significance": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 0,
                          "maximum": 5,
                          "example": 2
                        },
                        "year": {
                          "type": "string",
                          "example": "1"
                        },
                        "month": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "day": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "hour": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "minute": {
                          "type": "string",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "endingYear": {
                          "type": "string",
                          "example": "2"
                        },
                        "endingMonth": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "endingDay": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "endingHour": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "endingMinute": {
                          "type": "integer",
                          "nullable": true,
                          "format": "int32",
                          "example": 1
                        },
                        "lane": {
                          "type": "string",
                          "nullable": true
                        },
                        "backgroundColor": {
                          "type": "string",
                          "nullable": true
                        },
                        "category": {
                          "$ref": "#/paths/~1history/get/responses/200/content/application~1json/schema/oneOf/1/properties/category"
                        },
                        "content": {
                          "type": "string",
                          "example": "Short Description"
                        },
                        "fullcontent": {
                          "type": "string",
                          "example": "Full content"
                        },
                        "displayDateName": {
                          "type": "string",
                          "nullable": true
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "meta": {
                          "type": "string",
                          "nullable": true,
                          "example": "Secret information"
                        },
                        "likes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                          },
                          "nullable": true
                        },
                        "world": {
                          "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                        },
                        "author": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                        },
                        "article": {
                          "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                        },
                        "location": {
                          "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                        },
                        "species": {
                          "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                        },
                        "report": {
                          "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                        },
                        "cover": {
                          "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                        },
                        "characters": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "organizations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "timelines": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1timeline/put/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "displayRange": {
                          "type": "boolean"
                        },
                        "alternativeDisplayRange": {
                          "type": "string",
                          "example": "Alternative display name"
                        },
                        "editURL": {
                          "type": "string",
                          "example": "http://www.worldanvil.com/world/timeline/history/<id>/edit"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "History"
        ],
        "summary": "Create History",
        "description": "Create a historical event. The title, year and world are required fields. Check all the fields in the schema definition. To add an event to a timeline you have to update the timeline object.",
        "operationId": "createHistory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "History Reference Schema - GR -1",
                "description": "This basic reference schema for historical events only contains the most basic info.",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "title": {
                    "type": "string",
                    "example": "History Title"
                  },
                  "slug": {
                    "type": "string",
                    "nullable": true
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "private",
                      "public"
                    ]
                  },
                  "isWip": {
                    "type": "boolean",
                    "nullable": true
                  },
                  "isDraft": {
                    "type": "boolean",
                    "nullable": true
                  },
                  "entityClass": {
                    "type": "string",
                    "enum": [
                      "HistoricalEntry"
                    ]
                  },
                  "icon": {
                    "type": "string",
                    "enum": [
                      "fa-solid fa-calendar-lines-pen"
                    ]
                  },
                  "url": {
                    "type": "string",
                    "example": "https://www.worldanvil.com/w/<world-slug>/h/<id>"
                  },
                  "subscribergroups": {
                    "type": "array",
                    "items": {
                      "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                    },
                    "example": []
                  },
                  "folderId": {
                    "type": "string",
                    "nullable": true
                  },
                  "tags": {
                    "type": "string",
                    "nullable": true,
                    "example": "tag1,tag2,tag3"
                  },
                  "updateDate": {
                    "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                  },
                  "isEditable": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "success": {
                    "type": "boolean",
                    "readOnly": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The reference object of the created historical event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1history/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "History"
        ],
        "summary": "Delete History",
        "description": "Delete a historical event with its id.",
        "operationId": "deleteHistory",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Historical event deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "History"
        ],
        "summary": "Update History",
        "description": "Update the historical event with a specific id. Check the schema for all the fields available.",
        "operationId": "updateHistory",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "History Update Schema",
                "description": "This schema contains all the fields that can be updated on a historical event.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "History Title"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "private",
                      "public"
                    ]
                  },
                  "icon": {
                    "type": "string",
                    "enum": [
                      "fa-solid fa-calendar-lines-pen"
                    ]
                  },
                  "subscribergroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  },
                  "folderId": {
                    "type": "string",
                    "nullable": true
                  },
                  "tags": {
                    "type": "string",
                    "nullable": true,
                    "example": "tag1,tag2,tag3"
                  },
                  "significance": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "maximum": 5,
                    "example": 2
                  },
                  "year": {
                    "type": "string",
                    "example": "1"
                  },
                  "month": {
                    "type": "integer",
                    "nullable": true,
                    "format": "int32",
                    "example": 1
                  },
                  "day": {
                    "type": "integer",
                    "nullable": true,
                    "format": "int32",
                    "example": 1
                  },
                  "hour": {
                    "type": "integer",
                    "nullable": true,
                    "format": "int32",
                    "example": 1
                  },
                  "minute": {
                    "type": "string",
                    "nullable": true,
                    "format": "int32",
                    "example": 1
                  },
                  "endingYear": {
                    "type": "string",
                    "example": "2"
                  },
                  "endingMonth": {
                    "type": "integer",
                    "nullable": true,
                    "format": "int32",
                    "example": 1
                  },
                  "endingDay": {
                    "type": "integer",
                    "nullable": true,
                    "format": "int32",
                    "example": 1
                  },
                  "endingHour": {
                    "type": "integer",
                    "nullable": true,
                    "format": "int32",
                    "example": 1
                  },
                  "endingMinute": {
                    "type": "integer",
                    "nullable": true,
                    "format": "int32",
                    "example": 1
                  },
                  "lane": {
                    "type": "string",
                    "nullable": true
                  },
                  "backgroundColor": {
                    "type": "string",
                    "nullable": true
                  },
                  "category": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "enum": [
                          ""
                        ]
                      }
                    }
                  },
                  "content": {
                    "type": "string",
                    "example": "Short Description"
                  },
                  "fullcontent": {
                    "type": "string",
                    "example": "Full content"
                  },
                  "displayDateName": {
                    "type": "string",
                    "nullable": true
                  },
                  "meta": {
                    "type": "string",
                    "nullable": true,
                    "example": "Secret information"
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "article": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "location": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "species": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "report": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "cover": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "characters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "example": []
                  },
                  "organizations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "example": []
                  },
                  "displayRange": {
                    "type": "boolean"
                  },
                  "alternativeDisplayRange": {
                    "type": "string",
                    "example": "Alternative display name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1history/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/world/histories": {
      "post": {
        "tags": [
          "History"
        ],
        "summary": "List Histories By World",
        "description": "Retrieve a list of historical events within a world. Use offset to skip the first n elements of the result, and limit to specify the maximum number of elements to retrieve.",
        "operationId": "listHistoriesByWorld",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of event metadata resources up to the limit at the offset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1history/put/requestBody/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/image": {
      "get": {
        "tags": [
          "Image"
        ],
        "summary": "Read Image",
        "description": "Retrieve the metadata of any image on your account or public image by its id.",
        "operationId": "readImage",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested image metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                        },
                        {
                          "type": "object",
                          "title": "Image - GR -1",
                          "description": "Basic identifing metadata of an image returned when the granularity is set to -1.",
                          "properties": {
                            "isEditable": {
                              "type": "boolean",
                              "example": true,
                              "readOnly": true
                            },
                            "success": {
                              "type": "boolean",
                              "example": true,
                              "readOnly": true
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1image/get/responses/200/content/application~1json/schema/oneOf/0"
                        },
                        {
                          "type": "object",
                          "title": "Image - GR 0",
                          "description": "Most of the metadata of an image returned when the granularity is set to 0.",
                          "properties": {
                            "filename": {
                              "type": "string",
                              "example": "<image-hash>.<extension>",
                              "readOnly": true
                            },
                            "path": {
                              "type": "string",
                              "example": "/uploads/images",
                              "readOnly": true
                            },
                            "size": {
                              "type": "integer",
                              "format": "int32",
                              "readOnly": true
                            },
                            "width": {
                              "type": "integer",
                              "format": "int32",
                              "readOnly": true
                            },
                            "height": {
                              "type": "integer",
                              "format": "int32",
                              "readOnly": true
                            },
                            "extension": {
                              "type": "string",
                              "enum": [
                                "webp",
                                "png",
                                "jpg",
                                "jpeg",
                                "gif"
                              ],
                              "readOnly": true
                            },
                            "description": {
                              "type": "string",
                              "example": "Text of description."
                            },
                            "alt": {
                              "type": "string",
                              "example": "Alt Text"
                            },
                            "creditArtistName": {
                              "type": "string",
                              "example": "Name of the artist."
                            },
                            "creditArtistWebsite": {
                              "type": "string",
                              "example": "Webiste of the artist."
                            },
                            "creditArtTitle": {
                              "type": "string",
                              "example": "Title of the image."
                            },
                            "creditArtUrl": {
                              "type": "string",
                              "example": "Url to the original website or location of the image."
                            },
                            "creationDate": {
                              "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                            },
                            "views": {
                              "type": "integer",
                              "format": "int32",
                              "nullable": true,
                              "readOnly": true
                            },
                            "likes": {
                              "type": "integer",
                              "format": "int32",
                              "nullable": true,
                              "readOnly": true
                            },
                            "isFeatured": {
                              "type": "boolean"
                            },
                            "linkUrl": {
                              "type": "string",
                              "example": "https://example.org"
                            },
                            "pageUrl": {
                              "type": "string",
                              "example": "https://www.worldanvil.com/i/<id>",
                              "readOnly": true
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1image/get/responses/200/content/application~1json/schema/oneOf/1"
                        },
                        {
                          "type": "object",
                          "title": "Image - GR 2",
                          "description": "Full metadata of an image returned when the granularity is set to 2.",
                          "properties": {
                            "article": {
                              "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                            },
                            "owner": {
                              "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                            },
                            "world": {
                              "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                            },
                            "charater": {
                              "type": "object",
                              "title": "Character Reference Schema",
                              "description": "The reference schema of a hero character.",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "title": {
                                  "type": "string",
                                  "example": "Name of Character"
                                },
                                "slug": {
                                  "type": "string",
                                  "example": "<id>"
                                },
                                "state": {
                                  "type": "string",
                                  "enum": [
                                    "visible",
                                    "hidden"
                                  ]
                                },
                                "isWip": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "isDraft": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "entityClass": {
                                  "type": "string",
                                  "enum": [
                                    "Character"
                                  ]
                                },
                                "icon": {
                                  "type": "string",
                                  "enum": [
                                    "fa-solid fa-mask"
                                  ]
                                },
                                "url": {
                                  "type": "string",
                                  "example": "http://www.worldanvil.com/hero/<id>"
                                },
                                "subscribergroups": {
                                  "type": "array",
                                  "example": [],
                                  "items": {
                                    "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                                  }
                                },
                                "folderId": {
                                  "type": "string",
                                  "example": "-1"
                                },
                                "tags": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "updateDate": {
                                  "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                                }
                              }
                            },
                            "gallieries": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "title": "Gallery",
                                "description": "Metadata of a gallery.",
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "format": "int32",
                                    "nullable": false
                                  },
                                  "title": {
                                    "type": "string",
                                    "example": "Gallery Title"
                                  },
                                  "slug": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "state": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "isWip": {
                                    "type": "boolean",
                                    "nullable": true
                                  },
                                  "isDraft": {
                                    "type": "boolean",
                                    "nullable": true
                                  },
                                  "entityClass": {
                                    "type": "string",
                                    "enum": [
                                      "Gallery"
                                    ]
                                  },
                                  "icon": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "url": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "subscribergroups": {
                                    "type": "array",
                                    "example": [],
                                    "items": {
                                      "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                                    }
                                  },
                                  "folderId": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "tags": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "updateDate": {
                                    "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                                  }
                                }
                              },
                              "example": [],
                              "readOnly": true
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Image"
        ],
        "summary": "Create Image (NYI)",
        "description": "This is not yet available. It is currently not possible to upload image binaries via the API.",
        "operationId": "createImage",
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Image"
        ],
        "summary": "Delete Image",
        "description": "Delete an image. This action is irreversible.",
        "operationId": "deleteImage",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted the image successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Image"
        ],
        "summary": "Update Image",
        "description": "Update the image metadata of a single image. It is currently not possible to change the image binary with the API.",
        "operationId": "updateImage",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/paths/~1image/get/responses/200/content/application~1json/schema/oneOf/1"
                  },
                  {
                    "type": "object",
                    "title": "Image Update",
                    "description": "All the fields that can be updated in an image.",
                    "properties": {
                      "article": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      },
                      "world": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      },
                      "charater": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference object of the updated image.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Image Reference",
                  "description": "Basic identifing metadata of an image.",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int32",
                      "nullable": false
                    },
                    "title": {
                      "type": "string",
                      "example": "Image Title"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "private",
                        "public"
                      ]
                    },
                    "isWip": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "isDraft": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "Image"
                      ]
                    },
                    "icon": {
                      "type": "string",
                      "enum": [
                        "fa-solid fa-image"
                      ]
                    },
                    "url": {
                      "type": "string",
                      "example": "https://www.worldanvil.com/uploads/images/<image-id>.<image-extension>"
                    },
                    "subscribergroups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      },
                      "example": []
                    },
                    "folderId": {
                      "type": "string",
                      "nullable": true
                    },
                    "tags": {
                      "type": "string",
                      "nullable": true,
                      "example": "tag1,tag2,tag3"
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/world/images": {
      "post": {
        "tags": [
          "Image"
        ],
        "summary": "List Images By World",
        "description": "Retrieve a list of images within a world. Use offset to skip the first n elements of the result, and limit to specify the maximum number of elements to retrieve.",
        "operationId": "listImagesByWorld",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of image metadata resources within the limit at the offset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/map": {
      "get": {
        "tags": [
          "Map"
        ],
        "summary": "Read Map",
        "description": "Retrieve the metadata, content and relationships of a single map. The returned fields depend on the given granularity.",
        "operationId": "readMap",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The map metadata, content and relationships.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1map/put/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "title": "Map Reference Schema - GR -1",
                      "description": "Reference object of a map resource. Used as a reference in the other schemas and returned when the granularity is set to -1.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": false
                        },
                        "title": {
                          "type": "string",
                          "example": "Map Title"
                        },
                        "slug": {
                          "type": "string",
                          "enum": [
                            "private",
                            "public"
                          ]
                        },
                        "state": {
                          "type": "string",
                          "nullable": true
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Map"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-compass"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "example": "-1"
                        },
                        "tags": {
                          "type": "string",
                          "example": ""
                        },
                        "author": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "description": {
                          "type": "string",
                          "example": "Description"
                        },
                        "legend": {
                          "type": "string",
                          "example": "Legend"
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "isDeleted": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "displayOnHomepage": {
                          "type": "boolean",
                          "example": true
                        },
                        "views": {
                          "type": "integer",
                          "format": "int32",
                          "nullable": true
                        },
                        "position": {
                          "type": "integer",
                          "format": "int32",
                          "example": 1233
                        },
                        "zoomOriginal": {
                          "type": "integer",
                          "format": "int32",
                          "example": 0
                        },
                        "zoomMin": {
                          "type": "integer",
                          "format": "int32",
                          "example": -2
                        },
                        "zoomMax": {
                          "type": "integer",
                          "format": "int32",
                          "example": 0
                        },
                        "centerY": {
                          "type": "integer",
                          "format": "int32",
                          "example": 1
                        },
                        "centerX": {
                          "type": "integer",
                          "format": "int32",
                          "example": 1
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Map Reference Schema - GR 2",
                      "description": "Full metadata, content and relationships of a map.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": false
                        },
                        "title": {
                          "type": "string",
                          "example": "Map Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "private",
                            "public"
                          ]
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Map"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-compass"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "example": "-1"
                        },
                        "tags": {
                          "type": "string",
                          "example": ""
                        },
                        "author": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "description": {
                          "type": "string",
                          "example": "Description"
                        },
                        "legend": {
                          "type": "string",
                          "example": "Legend"
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "isDeleted": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "displayOnHomepage": {
                          "type": "boolean",
                          "example": true
                        },
                        "views": {
                          "type": "integer",
                          "format": "int32",
                          "nullable": true
                        },
                        "position": {
                          "type": "integer",
                          "format": "int32",
                          "example": 1233
                        },
                        "zoomOriginal": {
                          "type": "integer",
                          "format": "int32",
                          "example": 0
                        },
                        "zoomMin": {
                          "type": "integer",
                          "format": "int32",
                          "example": -2
                        },
                        "zoomMax": {
                          "type": "integer",
                          "format": "int32",
                          "example": 0
                        },
                        "centerY": {
                          "type": "integer",
                          "format": "int32",
                          "example": 1
                        },
                        "centerX": {
                          "type": "integer",
                          "format": "int32",
                          "example": 1
                        },
                        "category": {
                          "$ref": "#/paths/~1category/put/responses/200/content/application~1json/schema"
                        },
                        "image": {
                          "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                        },
                        "compass": {
                          "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                        },
                        "thumbnail": {
                          "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                        },
                        "organization": {
                          "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                        },
                        "location": {
                          "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                        },
                        "world": {
                          "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                        },
                        "markers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1marker/put/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Map"
        ],
        "summary": "Create Map",
        "description": "Create a new map. Required parameters for the creation of this entity are \"title\", \"image\" and \"world\". Check the schema for all the available fields.\n\nNOTE - The image is just the id of an already uploaded image or map image file. It is not currently possible to upload a binary with the API and use it as the map image. ",
        "operationId": "createMap",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Map Create Schema",
                "description": "All the fields that can be created on a map and the required fields.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Map Title"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "private",
                      "public"
                    ]
                  },
                  "icon": {
                    "type": "string",
                    "example": "fa-solid fa-compass"
                  },
                  "subscribergroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "example": []
                  },
                  "tags": {
                    "type": "string",
                    "example": ""
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "example": "Description"
                  },
                  "legend": {
                    "type": "string",
                    "example": "Legend"
                  },
                  "isDeleted": {
                    "type": "boolean",
                    "nullable": true
                  },
                  "displayOnHomepage": {
                    "type": "boolean",
                    "example": true
                  },
                  "views": {
                    "type": "integer",
                    "format": "int32",
                    "nullable": true
                  },
                  "position": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1233
                  },
                  "zoomOriginal": {
                    "type": "integer",
                    "format": "int32",
                    "example": 0
                  },
                  "zoomMin": {
                    "type": "integer",
                    "format": "int32",
                    "example": -2
                  },
                  "zoomMax": {
                    "type": "integer",
                    "format": "int32",
                    "example": 0
                  },
                  "centerY": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1
                  },
                  "centerX": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1
                  },
                  "category": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "image": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "compass": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "thumbnail": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "organization": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "location": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                },
                "required": [
                  "title",
                  "image",
                  "world"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the newly created map.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Map Reference Schema - GR -1",
                  "description": "Reference object of a map resource. Used as a reference in the other schemas and returned when the granularity is set to -1.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "nullable": false
                    },
                    "title": {
                      "type": "string",
                      "example": "Map Title"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "private",
                        "public"
                      ]
                    },
                    "isWip": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "isDraft": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "Map"
                      ]
                    },
                    "icon": {
                      "type": "string",
                      "enum": [
                        "fa-solid fa-compass"
                      ]
                    },
                    "url": {
                      "type": "string",
                      "nullable": true
                    },
                    "subscribergroups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      },
                      "example": []
                    },
                    "folderId": {
                      "type": "string",
                      "example": "-1"
                    },
                    "tags": {
                      "type": "string",
                      "example": ""
                    },
                    "author": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    },
                    "isEditable": {
                      "type": "boolean",
                      "readOnly": true
                    },
                    "success": {
                      "type": "boolean",
                      "readOnly": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Map"
        ],
        "summary": "Delete Map",
        "description": "Delete a map. This process is not reversible.",
        "operationId": "deleteMap",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Map was deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Map"
        ],
        "summary": "Update Map",
        "description": "Update the metadata, content and relationships of a map. Check the schema for all the available fields. It is not possible to replace the image of the map with a new binary, but you can use an existing image.",
        "operationId": "updateMap",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Map Update Schema",
                "description": "All the fields that can be updated on a map.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Map Title"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "private",
                      "public"
                    ]
                  },
                  "icon": {
                    "type": "string",
                    "example": "fa-solid fa-compass"
                  },
                  "subscribergroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "example": []
                  },
                  "tags": {
                    "type": "string",
                    "example": ""
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "example": "Description"
                  },
                  "legend": {
                    "type": "string",
                    "example": "Legend"
                  },
                  "isDeleted": {
                    "type": "boolean",
                    "nullable": true
                  },
                  "displayOnHomepage": {
                    "type": "boolean",
                    "example": true
                  },
                  "views": {
                    "type": "integer",
                    "format": "int32",
                    "nullable": true
                  },
                  "position": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1233
                  },
                  "zoomOriginal": {
                    "type": "integer",
                    "format": "int32",
                    "example": 0
                  },
                  "zoomMin": {
                    "type": "integer",
                    "format": "int32",
                    "example": -2
                  },
                  "zoomMax": {
                    "type": "integer",
                    "format": "int32",
                    "example": 0
                  },
                  "centerY": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1
                  },
                  "centerX": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1
                  },
                  "category": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "image": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "compass": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "thumbnail": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "organization": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "location": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the updated map.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1map/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/world/maps": {
      "post": {
        "tags": [
          "Map"
        ],
        "summary": "List Maps By World",
        "description": "Retrieve a list of maps within a world. Use offset to skip the first n elements of the result, and limit to specify the maximum number of elements to retrieve.",
        "operationId": "listMapsByWorld",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of map metadata resources within the limit at the offset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1map/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/layer": {
      "get": {
        "tags": [
          "Map Layer"
        ],
        "summary": "Read Layer",
        "description": "Retrieve a map layer by its id. The granularity determines the fields that are returned.",
        "operationId": "readLayer",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The map layer metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1layer/put/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "title": "Map Layer Reference Schema - GR 0",
                      "description": "Returned map layer resource when the granularity is set to 0.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": false
                        },
                        "title": {
                          "type": "string",
                          "example": "Layer Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "private",
                            "public"
                          ]
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Layer"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-layer-group"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "example": "-1"
                        },
                        "tags": {
                          "type": "string",
                          "example": ""
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "description": {
                          "type": "string",
                          "example": "Description"
                        },
                        "position": {
                          "type": "integer",
                          "format": "int32",
                          "example": 0
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Map Layer Reference Schema - GR 2",
                      "description": "Returned map layer resource when the granularity is set to 2.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": false
                        },
                        "title": {
                          "type": "string",
                          "example": "Layer Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "private",
                            "public"
                          ]
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Layer"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-layer-group"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "example": "-1"
                        },
                        "tags": {
                          "type": "string",
                          "example": ""
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "description": {
                          "type": "string",
                          "example": "Description"
                        },
                        "position": {
                          "type": "integer",
                          "format": "int32",
                          "example": 0
                        },
                        "image": {
                          "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                        },
                        "map": {
                          "$ref": "#/paths/~1map/put/responses/200/content/application~1json/schema"
                        },
                        "group": {
                          "$ref": "#/paths/~1markergroup/put/responses/200/content/application~1json/schema"
                        },
                        "world": {
                          "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                        },
                        "author": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Map Layer"
        ],
        "summary": "Create Layer",
        "description": "Create a new map layer. Required parameters for the creation of this entity are \"title\" and \"map\". It is not possible to upload a new binary for the image. Only existing images can be assigned as the layer image.",
        "operationId": "createLayer",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Map Layer Create Schema",
                "description": "All the fields that a map layer can be created with and the required fields.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Layer Title"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "private",
                      "public"
                    ]
                  },
                  "subscribergroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "example": []
                  },
                  "description": {
                    "type": "string",
                    "example": "Description"
                  },
                  "position": {
                    "type": "integer",
                    "format": "int32",
                    "example": 0
                  },
                  "image": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "map": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "group": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                },
                "required": [
                  "title",
                  "map"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the newly created map layer.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Map Layer Reference Schema - GR -1",
                  "description": "Reference object of a map layer resource. Used as a reference in the other schemas and returned when the granularity is set to -1.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "nullable": false
                    },
                    "title": {
                      "type": "string",
                      "example": "Layer Title"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "private",
                        "public"
                      ]
                    },
                    "isWip": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "isDraft": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "Layer"
                      ]
                    },
                    "icon": {
                      "type": "string",
                      "enum": [
                        "fa-solid fa-layer-group"
                      ]
                    },
                    "url": {
                      "type": "string",
                      "nullable": true
                    },
                    "subscribergroups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      },
                      "example": []
                    },
                    "folderId": {
                      "type": "string",
                      "example": "-1"
                    },
                    "tags": {
                      "type": "string",
                      "example": ""
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    },
                    "isEditable": {
                      "type": "boolean",
                      "readOnly": true
                    },
                    "success": {
                      "type": "boolean",
                      "readOnly": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Map Layer"
        ],
        "summary": "Delete Layer",
        "description": "Delete a map layer. This action is irreversible. No associated groups or markers will be deleted. The layer image will not be deleted.",
        "operationId": "deleteLayer",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted map layer successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Map Layer"
        ],
        "summary": "Update Layer",
        "description": "Update the metadata, content and relationships of a map layer. It is not possible to upload a new binary for the image. Only existing images can be assigned as the layer image.",
        "operationId": "updateLayer",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Map Layer Update Schema",
                "description": "All the fields that can be updated on a map layer.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Layer Title"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "private",
                      "public"
                    ]
                  },
                  "subscribergroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "example": []
                  },
                  "description": {
                    "type": "string",
                    "example": "Description"
                  },
                  "position": {
                    "type": "integer",
                    "format": "int32",
                    "example": 0
                  },
                  "image": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "map": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "group": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the updated map layer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1layer/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/map/layers": {
      "post": {
        "tags": [
          "Map Layer"
        ],
        "summary": "List Layers By Map",
        "description": "Retrieve a list of layers added to a map. Use offset to skip the first n elements of the result, and limit to specify the maximum number of elements to retrieve.",
        "operationId": "listLayersByMap",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of layer metadata resources within the limit at the offset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1layer/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/markergroup": {
      "get": {
        "tags": [
          "Marker Group"
        ],
        "summary": "Read Marker Group",
        "description": "Retrieve the metadata of a single marker group. The returned fields depend on the given granularity.",
        "operationId": "readMarkerGroup",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The marker group metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1markergroup/put/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "title": "Marker Group Reference Schema - GR 0",
                      "description": "Reference object of a map resource. Adds the active on load and position metadata fields.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": false
                        },
                        "title": {
                          "type": "string",
                          "example": "Marker Group Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "private",
                            "public"
                          ]
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "MarkerGroup"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-map-location-dot"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "example": "-1"
                        },
                        "tags": {
                          "type": "string",
                          "example": ""
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "activeOnLoad": {
                          "type": "boolean"
                        },
                        "position": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Marker Group Reference Schema - GR 2",
                      "description": "Marker group metadata and relationships.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": false
                        },
                        "title": {
                          "type": "string",
                          "example": "Marker Group Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "private",
                            "public"
                          ]
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "MarkerGroup"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-map-location-dot"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "example": "-1"
                        },
                        "tags": {
                          "type": "string",
                          "example": ""
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "activeOnLoad": {
                          "type": "boolean"
                        },
                        "position": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "map": {
                          "$ref": "#/paths/~1map/put/responses/200/content/application~1json/schema"
                        },
                        "author": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Marker Group"
        ],
        "summary": "Create Marker Group",
        "description": "Create a new marker group. Required parameters for the creation of this entity are \"title\" and \"map\".",
        "operationId": "createMarkerGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Marker Group Create Schema",
                "description": "All the fields that a marker group can be created with and the required fields.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Marker Group Title"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "private",
                      "public"
                    ]
                  },
                  "subscribergroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "example": []
                  },
                  "activeOnLoad": {
                    "type": "boolean"
                  },
                  "position": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "map": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                },
                "required": [
                  "title",
                  "map"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the newly created marker group.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Marker Group Reference Schema - GR -1",
                  "description": "Reference object of a map resource. Used as a reference in the other schemas and returned when the granularity is set to -1.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "nullable": false
                    },
                    "title": {
                      "type": "string",
                      "example": "Marker Group Title"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "private",
                        "public"
                      ]
                    },
                    "isWip": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "isDraft": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "MarkerGroup"
                      ]
                    },
                    "icon": {
                      "type": "string",
                      "enum": [
                        "fa-solid fa-map-location-dot"
                      ]
                    },
                    "url": {
                      "type": "string",
                      "nullable": true
                    },
                    "subscribergroups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      },
                      "example": []
                    },
                    "folderId": {
                      "type": "string",
                      "example": "-1"
                    },
                    "tags": {
                      "type": "string",
                      "example": ""
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    },
                    "isEditable": {
                      "type": "boolean",
                      "readOnly": true
                    },
                    "success": {
                      "type": "boolean",
                      "readOnly": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Marker Group"
        ],
        "summary": "Delete Marker Group",
        "description": "Delete a marker group. This action is irreversible.",
        "operationId": "deleteMarkerGroup",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted marker group successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Marker Group"
        ],
        "summary": "Update Marker Group",
        "description": "Update marker group metadata. Check the schema for all the available fields.",
        "operationId": "updateMarkerGroup",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Marker Group Update Schema",
                "description": "All the fields that can be updated on a marker group.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Marker Group Title"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "private",
                      "public"
                    ]
                  },
                  "subscribergroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "example": []
                  },
                  "activeOnLoad": {
                    "type": "boolean"
                  },
                  "position": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "map": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the updated marker group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1markergroup/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/map/markergroups": {
      "post": {
        "tags": [
          "Marker Group"
        ],
        "summary": "List Marker Groups By Map",
        "description": "This endpoint returns a list of marker groups by map.",
        "operationId": "listMarkerGroupsByMap",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of marker group metadata resources within the limit at the offset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1markergroup/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/marker": {
      "get": {
        "tags": [
          "Marker"
        ],
        "summary": "Read Marker",
        "description": "Retrieve the metadata, content and relationships of a marker (pin). The returned fields are determined by the granularity parameter.",
        "operationId": "readMarker",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "1",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A marker metadata resource.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1marker/put/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "title": "Map Marker (Pin) - GR 0",
                      "description": "Metadata and content of a map marker (pin).",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Marker Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "private",
                            "public"
                          ]
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Marker"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-location-dot"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "nullable": true
                        },
                        "tags": {
                          "type": "string",
                          "example": "#tag,#tags2"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "description": {
                          "type": "string",
                          "example": "Description"
                        },
                        "position": {
                          "type": "integer",
                          "example": 121
                        },
                        "htmlMarker": {
                          "type": "string",
                          "example": "<icon class='fa-solid fa-location-dot'></icon>"
                        },
                        "seeded": {
                          "type": "string",
                          "example": "Storyteller Seeds. Secret information only visible to the author."
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "isDeleted": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "type": {
                          "type": "string",
                          "nullable": true,
                          "example": null
                        },
                        "isDirectLink": {
                          "type": "boolean",
                          "example": false
                        },
                        "isDraggable": {
                          "type": "boolean",
                          "example": true
                        },
                        "labelTitle": {
                          "type": "string",
                          "nullable": true,
                          "example": "Label Title"
                        },
                        "labelType": {
                          "type": "string",
                          "enum": [
                            "label-default",
                            "label-bow",
                            "label-wob",
                            "label-kadwa1",
                            "label-kadwa2",
                            "label-kadwa3"
                          ]
                        },
                        "className": {
                          "type": "string",
                          "example": "css-class-name"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Map Marker (Pin) - GR 1",
                      "description": "Metadata and content of a map marker (pin). Adds the special marker type metadata for line, circle and polygon.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Marker Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "private",
                            "public"
                          ]
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Marker"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-location-dot"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "nullable": true
                        },
                        "tags": {
                          "type": "string",
                          "example": "#tag,#tags2"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "description": {
                          "type": "string",
                          "example": "Description"
                        },
                        "position": {
                          "type": "integer",
                          "example": 121
                        },
                        "htmlMarker": {
                          "type": "string",
                          "example": "<icon class='fa-solid fa-location-dot'></icon>"
                        },
                        "seeded": {
                          "type": "string",
                          "example": "Storyteller Seeds. Secret information only visible to the author."
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "isDeleted": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "type": {
                          "type": "string",
                          "nullable": true,
                          "example": null
                        },
                        "isDirectLink": {
                          "type": "boolean",
                          "example": false
                        },
                        "isDraggable": {
                          "type": "boolean",
                          "example": true
                        },
                        "labelTitle": {
                          "type": "string",
                          "nullable": true
                        },
                        "labelType": {
                          "type": "string",
                          "enum": [
                            "label-default",
                            "label-primary",
                            "label-success",
                            "label-info",
                            "label-warning",
                            "label-danger"
                          ]
                        },
                        "className": {
                          "type": "string",
                          "example": "css-class-name"
                        },
                        "geoX": {
                          "type": "integer",
                          "example": 2004
                        },
                        "geoY": {
                          "type": "integer",
                          "example": 2341
                        },
                        "geoZ": {
                          "type": "integer",
                          "nullable": true,
                          "example": 0
                        },
                        "polygonPoints": {
                          "type": "string",
                          "nullable": true,
                          "example": "2004,2341 2004,2341 2004,2341"
                        },
                        "circleRadius": {
                          "type": "integer",
                          "nullable": true,
                          "example": 200
                        },
                        "linePoints": {
                          "type": "string",
                          "nullable": true,
                          "example": "2004,2341 2004,2341 2004,2341"
                        },
                        "lineColor": {
                          "type": "string",
                          "nullable": true,
                          "example": "#ff0000"
                        },
                        "lineWeight": {
                          "type": "integer",
                          "nullable": true,
                          "example": 2
                        },
                        "lineOpacity": {
                          "type": "integer",
                          "nullable": true,
                          "example": 50
                        },
                        "lineDash": {
                          "type": "string",
                          "nullable": true,
                          "example": "5,5"
                        },
                        "colorOutline": {
                          "type": "string",
                          "nullable": true,
                          "example": "#ff0000"
                        },
                        "colorFill": {
                          "type": "string",
                          "nullable": true,
                          "example": "#ff0000"
                        },
                        "opacityOutline": {
                          "type": "integer",
                          "nullable": true,
                          "example": 50
                        },
                        "opacityFill": {
                          "type": "integer",
                          "nullable": true,
                          "example": 50
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Map Marker (Pin) - GR 2",
                      "description": "Metadata, content and relationships of a map marker (pin).",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Marker Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "private",
                            "public"
                          ]
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Marker"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-location-dot"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "nullable": true
                        },
                        "tags": {
                          "type": "string",
                          "example": "#tag,#tags2"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "description": {
                          "type": "string",
                          "example": "Description"
                        },
                        "position": {
                          "type": "integer",
                          "example": 121
                        },
                        "htmlMarker": {
                          "type": "string",
                          "example": "<i class='fa-solid fa-location-dot'></i>"
                        },
                        "seeded": {
                          "type": "string",
                          "example": "Storyteller Seeds. Secret information only visible to the author."
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "isDeleted": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "type": {
                          "type": "string",
                          "nullable": true,
                          "example": null
                        },
                        "isDirectLink": {
                          "type": "boolean",
                          "example": false
                        },
                        "isDraggable": {
                          "type": "boolean",
                          "example": true
                        },
                        "labelTitle": {
                          "type": "string",
                          "nullable": true
                        },
                        "labelType": {
                          "type": "string",
                          "enum": [
                            "label-default",
                            "label-primary",
                            "label-success",
                            "label-info",
                            "label-warning",
                            "label-danger"
                          ]
                        },
                        "className": {
                          "type": "string",
                          "example": "css-class-name"
                        },
                        "geoX": {
                          "type": "integer",
                          "minimum": 0,
                          "example": 2004
                        },
                        "geoY": {
                          "type": "integer",
                          "minimum": 0,
                          "example": 2341
                        },
                        "geoZ": {
                          "type": "integer",
                          "nullable": true,
                          "example": null
                        },
                        "polygonPoints": {
                          "type": "string",
                          "nullable": true,
                          "example": "2004,2341 2004,2341 2004,2341"
                        },
                        "circleRadius": {
                          "type": "integer",
                          "nullable": true,
                          "example": 200
                        },
                        "linePoints": {
                          "type": "string",
                          "nullable": true,
                          "example": "2004,2341 2004,2341 2004,2341"
                        },
                        "lineColor": {
                          "type": "string",
                          "nullable": true,
                          "example": "#ff0000"
                        },
                        "lineWeight": {
                          "type": "integer",
                          "nullable": true,
                          "example": 2
                        },
                        "lineOpacity": {
                          "type": "integer",
                          "nullable": true,
                          "example": 50
                        },
                        "lineDash": {
                          "type": "string",
                          "nullable": true,
                          "example": "20"
                        },
                        "colorOutline": {
                          "type": "string",
                          "nullable": true,
                          "example": "#ff0000"
                        },
                        "colorFill": {
                          "type": "string",
                          "nullable": true,
                          "example": "#ff0000"
                        },
                        "opacityOutline": {
                          "type": "integer",
                          "nullable": true,
                          "example": 50
                        },
                        "opacityFill": {
                          "type": "integer",
                          "nullable": true,
                          "example": 50
                        },
                        "markertype": {
                          "$ref": "#/paths/~1markertype/put/responses/200/content/application~1json/schema"
                        },
                        "group": {
                          "$ref": "#/paths/~1markergroup/put/responses/200/content/application~1json/schema"
                        },
                        "targetLocation": {
                          "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                        },
                        "targetMap": {
                          "$ref": "#/paths/~1map/put/responses/200/content/application~1json/schema"
                        },
                        "targetOrganization": {
                          "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                        },
                        "targetArticle": {
                          "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                        },
                        "targetCategory": {
                          "$ref": "#/paths/~1category/put/responses/200/content/application~1json/schema"
                        },
                        "targetHistoricalEntry": {
                          "$ref": "#/paths/~1history/put/requestBody/content/application~1json/schema"
                        },
                        "map": {
                          "$ref": "#/paths/~1map/put/responses/200/content/application~1json/schema"
                        },
                        "world": {
                          "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Marker"
        ],
        "summary": "Create Marker",
        "description": "Create a new marker (pin). Check the schema for the possible and required fields.",
        "operationId": "createMarker",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Map Marker (Pin) - Create",
                "description": "All the properties of a map marker (pin) that can edited. Ensure all the correct properties are updated as there are a few different marker types.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Marker Title"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "private",
                      "public"
                    ]
                  },
                  "subscribergroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  },
                  "tags": {
                    "type": "string",
                    "example": "#tag,#tags2"
                  },
                  "description": {
                    "type": "string",
                    "example": "Description"
                  },
                  "position": {
                    "type": "integer",
                    "example": 121
                  },
                  "htmlMarker": {
                    "type": "string",
                    "example": "<i class='fa-solid fa-location-dot'></i>"
                  },
                  "seeded": {
                    "type": "string",
                    "example": "Storyteller Seeds. Secret information only visible to the author."
                  },
                  "isDirectLink": {
                    "type": "boolean",
                    "example": false
                  },
                  "isDraggable": {
                    "type": "boolean",
                    "example": true
                  },
                  "labelTitle": {
                    "type": "string",
                    "nullable": true
                  },
                  "labelType": {
                    "type": "string",
                    "enum": [
                      "label-default",
                      "label-primary",
                      "label-success",
                      "label-info",
                      "label-warning",
                      "label-danger"
                    ]
                  },
                  "className": {
                    "type": "string",
                    "example": "css-class-name"
                  },
                  "geoX": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 2004
                  },
                  "geoY": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 2341
                  },
                  "polygonPoints": {
                    "type": "string",
                    "nullable": true,
                    "example": "2004,2341 2004,2341 2004,2341"
                  },
                  "circleRadius": {
                    "type": "integer",
                    "nullable": true,
                    "example": 200
                  },
                  "linePoints": {
                    "type": "string",
                    "nullable": true,
                    "example": "2004,2341 2004,2341 2004,2341"
                  },
                  "lineColor": {
                    "type": "string",
                    "nullable": true,
                    "example": "#ff0000"
                  },
                  "lineWeight": {
                    "type": "integer",
                    "nullable": true,
                    "example": 2
                  },
                  "lineOpacity": {
                    "type": "integer",
                    "nullable": true,
                    "example": 50
                  },
                  "lineDash": {
                    "type": "string",
                    "nullable": true,
                    "example": "20"
                  },
                  "colorOutline": {
                    "type": "string",
                    "nullable": true,
                    "example": "#ff0000"
                  },
                  "colorFill": {
                    "type": "string",
                    "nullable": true,
                    "example": "#ff0000"
                  },
                  "opacityOutline": {
                    "type": "integer",
                    "nullable": true,
                    "example": 50
                  },
                  "opacityFill": {
                    "type": "integer",
                    "nullable": true,
                    "example": 50
                  },
                  "markertype": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "group": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "targetLocation": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "targetMap": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "targetOrganization": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "targetArticle": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "targetCategory": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "targetHistoricalEntry": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "map": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                },
                "required": [
                  "title",
                  "map"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created marker metadata resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Map Marker (Pin) - GR -1",
                  "description": "Basic metadata of a map marker (pin).",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "title": {
                      "type": "string",
                      "example": "Marker Title"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "private",
                        "public"
                      ]
                    },
                    "isWip": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "isDraft": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "Marker"
                      ]
                    },
                    "icon": {
                      "type": "string",
                      "enum": [
                        "fa-solid fa-location-dot"
                      ]
                    },
                    "url": {
                      "type": "string",
                      "nullable": true
                    },
                    "subscribergroups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      },
                      "example": []
                    },
                    "folderId": {
                      "type": "string",
                      "nullable": true
                    },
                    "tags": {
                      "type": "string",
                      "example": "#tag,#tags2"
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    },
                    "isEditable": {
                      "type": "boolean",
                      "readOnly": true
                    },
                    "success": {
                      "type": "boolean",
                      "readOnly": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Marker"
        ],
        "summary": "Delete Marker",
        "description": "Delete a marker. This action is irreversible.",
        "operationId": "deleteMarker",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Marker"
        ],
        "summary": "Update Marker",
        "description": "Update the metadata and content of a marker (pin). Check the schema for the possible fields.",
        "operationId": "updateMarker",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Map Marker (Pin) - Update",
                "description": "All the properties of a map marker (pin) that can be updated. Ensure all the correct properties are updated as there are a few different marker types.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Marker Title"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "private",
                      "public"
                    ]
                  },
                  "subscribergroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  },
                  "tags": {
                    "type": "string",
                    "example": "#tag,#tags2"
                  },
                  "description": {
                    "type": "string",
                    "example": "Description"
                  },
                  "position": {
                    "type": "integer",
                    "example": 121
                  },
                  "htmlMarker": {
                    "type": "string",
                    "example": "<i class='fa-solid fa-location-dot'></i>"
                  },
                  "seeded": {
                    "type": "string",
                    "example": "Storyteller Seeds. Secret information only visible to the author."
                  },
                  "isDirectLink": {
                    "type": "boolean",
                    "example": false
                  },
                  "isDraggable": {
                    "type": "boolean",
                    "example": true
                  },
                  "labelTitle": {
                    "type": "string",
                    "nullable": true
                  },
                  "labelType": {
                    "type": "string",
                    "enum": [
                      "label-default",
                      "label-primary",
                      "label-success",
                      "label-info",
                      "label-warning",
                      "label-danger"
                    ]
                  },
                  "className": {
                    "type": "string",
                    "example": "css-class-name"
                  },
                  "geoX": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 2004
                  },
                  "geoY": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 2341
                  },
                  "polygonPoints": {
                    "type": "string",
                    "nullable": true,
                    "example": "2004,2341 2004,2341 2004,2341"
                  },
                  "circleRadius": {
                    "type": "integer",
                    "nullable": true,
                    "example": 200
                  },
                  "linePoints": {
                    "type": "string",
                    "nullable": true,
                    "example": "2004,2341 2004,2341 2004,2341"
                  },
                  "lineColor": {
                    "type": "string",
                    "nullable": true,
                    "example": "#ff0000"
                  },
                  "lineWeight": {
                    "type": "integer",
                    "nullable": true,
                    "example": 2
                  },
                  "lineOpacity": {
                    "type": "integer",
                    "nullable": true,
                    "example": 50
                  },
                  "lineDash": {
                    "type": "string",
                    "nullable": true,
                    "example": "20"
                  },
                  "colorOutline": {
                    "type": "string",
                    "nullable": true,
                    "example": "#ff0000"
                  },
                  "colorFill": {
                    "type": "string",
                    "nullable": true,
                    "example": "#ff0000"
                  },
                  "opacityOutline": {
                    "type": "integer",
                    "nullable": true,
                    "example": 50
                  },
                  "opacityFill": {
                    "type": "integer",
                    "nullable": true,
                    "example": 50
                  },
                  "markertype": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "group": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "targetLocation": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "targetMap": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "targetOrganization": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "targetArticle": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "targetCategory": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "targetHistoricalEntry": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "map": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated marker metadata resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1marker/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/map/markers": {
      "post": {
        "tags": [
          "Marker"
        ],
        "summary": "List Markers By Map",
        "description": "Retrieve a list of marker metadata resources by map.",
        "operationId": "listMarkersByMap",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of marker metadata resources.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1marker/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/markergroup/markers": {
      "post": {
        "tags": [
          "Marker"
        ],
        "summary": "List Markers By Marker Group",
        "description": "Retrieve a list of markers within a marker group. The list is limited by the limit and offset parameters.",
        "operationId": "listMarkersByMarkerGroup",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/markertype": {
      "get": {
        "tags": [
          "Marker Type (Pin)"
        ],
        "summary": "Read Marker Type",
        "description": "Read the content of a custom marker type (pin).",
        "operationId": "readMarkerType",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested marker type resource.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1markertype/put/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "title": "Marker Type (Pin) Reference Schema - GR 0",
                      "description": "The marker type (pin) metadata.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Name of Pin"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "public",
                            "private"
                          ]
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "MarkerType"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-map-pin"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "example": [],
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          }
                        },
                        "folderId": {
                          "type": "string",
                          "nullable": true
                        },
                        "tags": {
                          "type": "string",
                          "example": "tag,tag2"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "iconSizeWidth": {
                          "type": "integer",
                          "format": "int32",
                          "example": 20
                        },
                        "iconSizeHeight": {
                          "type": "integer",
                          "format": "int32",
                          "example": 20
                        },
                        "shadowSizeWidth": {
                          "type": "integer",
                          "format": "int32",
                          "example": 21
                        },
                        "shadowSizeHeight": {
                          "type": "integer",
                          "format": "int32",
                          "example": 21
                        },
                        "iconAnchorX": {
                          "type": "integer",
                          "format": "int32",
                          "example": 0
                        },
                        "iconAnchorY": {
                          "type": "integer",
                          "format": "int32",
                          "example": 10
                        },
                        "popupAnchorX": {
                          "type": "integer",
                          "format": "int32",
                          "example": 21
                        },
                        "popupAnchorY": {
                          "type": "integer",
                          "format": "int32",
                          "example": 10
                        },
                        "className": {
                          "type": "string",
                          "nullable": true
                        },
                        "identifier": {
                          "type": "string",
                          "example": "<title><username>"
                        },
                        "isGuild": {
                          "type": "boolean",
                          "example": true
                        },
                        "isPublic": {
                          "type": "boolean",
                          "example": false
                        },
                        "theme": {
                          "type": "string",
                          "example": "Star Wars, D&D, etc."
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Marker Type (Pin) Reference Schema - GR 2",
                      "description": "The complete marker type (pin) reference schema with all the relations to other resources.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Name of Pin"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "public",
                            "private"
                          ]
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "MarkerType"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-map-pin"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "example": [],
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          }
                        },
                        "folderId": {
                          "type": "string",
                          "nullable": true
                        },
                        "tags": {
                          "type": "string",
                          "example": "tag,tag2"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "iconSizeWidth": {
                          "type": "integer",
                          "format": "int32",
                          "example": 20
                        },
                        "iconSizeHeight": {
                          "type": "integer",
                          "format": "int32",
                          "example": 20
                        },
                        "shadowSizeWidth": {
                          "type": "integer",
                          "format": "int32",
                          "example": 21
                        },
                        "shadowSizeHeight": {
                          "type": "integer",
                          "format": "int32",
                          "example": 21
                        },
                        "iconAnchorX": {
                          "type": "integer",
                          "format": "int32",
                          "example": 0
                        },
                        "iconAnchorY": {
                          "type": "integer",
                          "format": "int32",
                          "example": 10
                        },
                        "popupAnchorX": {
                          "type": "integer",
                          "format": "int32",
                          "example": 21
                        },
                        "popupAnchorY": {
                          "type": "integer",
                          "format": "int32",
                          "example": 10
                        },
                        "className": {
                          "type": "string",
                          "nullable": true
                        },
                        "identifier": {
                          "type": "string",
                          "example": "<title><username>"
                        },
                        "isGuild": {
                          "type": "boolean",
                          "example": true
                        },
                        "isPublic": {
                          "type": "boolean",
                          "example": false
                        },
                        "theme": {
                          "type": "string",
                          "example": "Star Wars, D&D, etc."
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "pin": {
                          "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                        },
                        "shadow": {
                          "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                        },
                        "world": {
                          "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                        },
                        "author": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Marker Type (Pin)"
        ],
        "summary": "Create Marker Type",
        "description": "Create a custom marker type (pin). The title is the only required field. Check all the fields in the schema definition.",
        "operationId": "createMarkerType",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Marker Type (Pin) Create Schema",
                "description": "All the fields here can added when creating a custom pin and the required fields.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Name of Pin"
                  },
                  "tags": {
                    "type": "string",
                    "example": "tag,tag2"
                  },
                  "iconAnchorX": {
                    "type": "integer",
                    "format": "int32",
                    "example": 0
                  },
                  "iconAnchorY": {
                    "type": "integer",
                    "format": "int32",
                    "example": 10
                  },
                  "popupAnchorX": {
                    "type": "integer",
                    "format": "int32",
                    "example": 21
                  },
                  "popupAnchorY": {
                    "type": "integer",
                    "format": "int32",
                    "example": 10
                  },
                  "className": {
                    "type": "string",
                    "nullable": true
                  },
                  "identifier": {
                    "type": "string",
                    "example": "<title><username>"
                  },
                  "theme": {
                    "type": "string",
                    "example": "Star Wars, D&D, etc."
                  },
                  "pin": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "shadow": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                },
                "required": [
                  "title"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated marker type resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Marker Type (Pin) Reference Schema - GR -1",
                  "description": "The basic marker type (pin) reference schema with the core metadata",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "title": {
                      "type": "string",
                      "example": "Name of Pin"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "public",
                        "private"
                      ]
                    },
                    "isWip": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "isDraft": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "MarkerType"
                      ]
                    },
                    "icon": {
                      "type": "string",
                      "enum": [
                        "fa-solid fa-map-pin"
                      ]
                    },
                    "url": {
                      "type": "string",
                      "nullable": true
                    },
                    "subscribergroups": {
                      "type": "array",
                      "example": [],
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      }
                    },
                    "folderId": {
                      "type": "string",
                      "nullable": true
                    },
                    "tags": {
                      "type": "string",
                      "example": "tag,tag2"
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    },
                    "isEditable": {
                      "type": "boolean",
                      "readOnly": true
                    },
                    "success": {
                      "type": "boolean",
                      "readOnly": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Marker Type (Pin)"
        ],
        "summary": "Delete Marker Type",
        "description": "Delete custom marker type (pin).",
        "operationId": "deleteMarkerType",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted marker type successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Marker Type (Pin)"
        ],
        "summary": "Update Marker Type",
        "description": "Update the metadata, content and relationships of a custom marker type (pin).",
        "operationId": "updateMarkerType",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Marker Type (Pin) Update Schema",
                "description": "All the fields here can be updated through the API.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Name of Pin"
                  },
                  "tags": {
                    "type": "string",
                    "example": "tag,tag2"
                  },
                  "iconAnchorX": {
                    "type": "integer",
                    "format": "int32",
                    "example": 0
                  },
                  "iconAnchorY": {
                    "type": "integer",
                    "format": "int32",
                    "example": 10
                  },
                  "popupAnchorX": {
                    "type": "integer",
                    "format": "int32",
                    "example": 21
                  },
                  "popupAnchorY": {
                    "type": "integer",
                    "format": "int32",
                    "example": 10
                  },
                  "className": {
                    "type": "string",
                    "nullable": true
                  },
                  "identifier": {
                    "type": "string",
                    "example": "<title><username>"
                  },
                  "theme": {
                    "type": "string",
                    "example": "Star Wars, D&D, etc."
                  },
                  "pin": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "shadow": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated marker type resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1markertype/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/markertypes": {
      "post": {
        "tags": [
          "Marker Type (Pin)"
        ],
        "summary": "List Marker Types",
        "description": "Retrieve a list of marker types. Use offset to skip the first n elements of the result, and limit to specify the maximum number of elements to retrieve.",
        "operationId": "listMarkerTypes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "string",
                    "minimum": 1,
                    "maximum": 50,
                    "example": 50
                  },
                  "offset": {
                    "type": "string",
                    "minimum": 0,
                    "example": 0
                  }
                },
                "required": [
                  "limit",
                  "offset"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of marker types within the limit at the offset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1markertype/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/manuscript": {
      "get": {
        "tags": [
          "Manuscript"
        ],
        "summary": "Read Manuscript",
        "description": "Get the data of a single manuscript.  \nGranularity range is -1 to 2.",
        "operationId": "readManuscript",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptId}}"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "Manuscript"
        ],
        "summary": "Create Manuscript",
        "description": "Create a new manuscipt. Required parameters for the creation of this entity are \"title\" and \"world\".",
        "operationId": "createManuscript",
        "parameters": [
          {
            "name": "",
            "in": "query",
            "schema": {
              "type": "string",
              "example": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "The name of the Manuscript"
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "{{worldId}}"
                      }
                    }
                  }
                }
              },
              "example": {
                "title": "The name of the Manuscript",
                "world": {
                  "id": "{{worldId}}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Manuscript"
        ],
        "summary": "Delete Manuscript",
        "description": "Delete a pin.",
        "operationId": "deleteManuscript",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptId}}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Manuscript"
        ],
        "summary": "Update Manuscript",
        "description": "Update (patch) the content of a pin.",
        "operationId": "updateManuscript",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "state": {
                    "type": "string",
                    "example": "public"
                  }
                }
              },
              "example": {
                "state": "public"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/world/manuscripts": {
      "post": {
        "tags": [
          "Manuscript"
        ],
        "summary": "List Manuscripts By World",
        "description": "Retrieve a list of manuscripts within a world. Use offset to skip the first n elements of the result, and limit to specify the maximum number of elements to retrieve.",
        "operationId": "listManuscriptsByWorld",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of manuscripts within the limit at the offset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "ManuscriptRef",
                        "description": "Schema of a manuscript reference object.",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "readOnly": true
                          },
                          "title": {
                            "type": "string",
                            "example": "Manuscript Title"
                          },
                          "slug": {
                            "type": "string",
                            "example": "<rand_int>-<user-slug>-manuscript-title",
                            "readOnly": true
                          },
                          "state": {
                            "type": "string",
                            "enum": [
                              "public",
                              "private"
                            ]
                          },
                          "isWip": {
                            "type": "boolean",
                            "nullable": true,
                            "example": null,
                            "readOnly": true
                          },
                          "isDraft": {
                            "type": "boolean",
                            "nullable": true,
                            "example": null,
                            "readOnly": true
                          },
                          "entityClass": {
                            "type": "string",
                            "readOnly": true,
                            "enum": [
                              "Manuscript"
                            ]
                          },
                          "icon": {
                            "type": "string",
                            "readOnly": true,
                            "example": [
                              "fa-solid fa-book"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "readOnly": true,
                            "example": "http://www.worldanvil.com/community/manuscripts/read/<manuscript-slug>"
                          },
                          "subscribergroups": {
                            "type": "array",
                            "items": {
                              "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                            }
                          },
                          "folderId": {
                            "type": "string",
                            "example": "-1",
                            "readOnly": true
                          },
                          "tags": {
                            "type": "string",
                            "nullable": true
                          },
                          "updateDate": {
                            "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/manuscript_beat": {
      "get": {
        "tags": [
          "Manuscript Beat"
        ],
        "summary": "Read Manuscript Beat",
        "description": "Get the data of a single manuscript beat.  \nGranularity range is -1 to 2.",
        "operationId": "readManuscriptBeat",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptBeatId}}"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "Manuscript Beat"
        ],
        "summary": "Create Manuscript Beat",
        "description": "Create a new manuscript beat. Required parameters for the creation of this entity are \"content\" and \"part\" (manuscript part).",
        "operationId": "createManuscriptBeat",
        "parameters": [
          {
            "name": "",
            "in": "query",
            "schema": {
              "type": "string",
              "example": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "example": "Some content here."
                  },
                  "part": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "{{manuscriptPartId}}"
                      }
                    }
                  }
                }
              },
              "example": {
                "content": "Some content here.",
                "part": {
                  "id": "{{manuscriptPartId}}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Manuscript Beat"
        ],
        "summary": "Delete Manuscript Beat",
        "description": "Delete a manuscript beat.",
        "operationId": "deleteManuscriptBeat",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptBeatId}}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Manuscript Beat"
        ],
        "summary": "Update Manuscript Beat",
        "description": "Update (patch) the content of a manuscript beat.",
        "operationId": "updateManuscriptBeat",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptBeatId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "position": {
                    "type": "string",
                    "example": "1"
                  }
                }
              },
              "example": {
                "position": "1"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/manuscript_part/manuscript_beats": {
      "post": {
        "tags": [
          "Manuscript Beat"
        ],
        "summary": "List Manuscript Beats By Manuscript Part",
        "description": "List all manuscript beats by a manuscript part given, filtered with a limit of entities shown and an offset.  \nLimit range is 0-50.  \nOffset should be non-negative.",
        "operationId": "listManuscriptBeatsByManuscriptPart",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptPartId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/manuscript_bookmark": {
      "get": {
        "tags": [
          "Manuscript Bookmark"
        ],
        "summary": "Read Manuscript Bookmark",
        "description": "Get the data of a single manuscript bookmark.  \nGranularity range is -1 to 2.",
        "operationId": "readManuscriptBookmark",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptBookmarkId}}"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "Manuscript Bookmark"
        ],
        "summary": "Create Manuscript Bookmark",
        "description": "Create a new manuscript bookmark. Required parameters for the creation of this entity are \"manuscript\".",
        "operationId": "createManuscriptBookmark",
        "parameters": [
          {
            "name": "",
            "in": "query",
            "schema": {
              "type": "string",
              "example": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "manuscript": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "{{manuscriptId}}"
                      }
                    }
                  }
                }
              },
              "example": {
                "manuscript": {
                  "id": "{{manuscriptId}}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Manuscript Bookmark"
        ],
        "summary": "Delete Manuscript Bookmark",
        "description": "Delete a manuscript bookmark.",
        "operationId": "deleteManuscriptBookmark",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptBookmarkId}}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Manuscript Bookmark"
        ],
        "summary": "Update Manuscript Bookmark",
        "description": "Update (patch) the content of a manuscript bookmark.",
        "operationId": "updateManuscriptBookmark",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptBookmarkId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "part": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "{{manuscriptPartId}}"
                      }
                    }
                  }
                }
              },
              "example": {
                "part": {
                  "id": "{{manuscriptPartId}}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/manuscript/manuscript_bookmarks": {
      "post": {
        "tags": [
          "Manuscript Bookmark"
        ],
        "summary": "List Manuscript Bookmarks By Manuscript",
        "description": "List all manuscript bookmarks by a manuscript given, filtered with a limit of entities shown and an offset.  \nLimit range is 0-50.  \nOffset should be non-negative.",
        "operationId": "listManuscriptBookmarksByManuscript",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/manuscript_part": {
      "get": {
        "tags": [
          "Manuscript Part"
        ],
        "summary": "Read Manuscript Part",
        "description": "Get the data of a single manuscript part.  \nGranularity range is -1 to 2.",
        "operationId": "readManuscriptPart",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptPartId}}"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "Manuscript Part"
        ],
        "summary": "Create Manuscript Part",
        "description": "Create a new manuscript part. Required parameters for the creation of this entity are \"type\" and \"version\" (manuscript version).",
        "operationId": "createManuscriptPart",
        "parameters": [
          {
            "name": "",
            "in": "query",
            "schema": {
              "type": "string",
              "example": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "{{imageId}}"
                      }
                    }
                  },
                  "title": {
                    "type": "string",
                    "example": "Chapter 1"
                  },
                  "type": {
                    "type": "string",
                    "example": "manuscript"
                  },
                  "version": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "{{manuscriptVersionId}}"
                      }
                    }
                  }
                }
              },
              "example": {
                "image": {
                  "id": "{{imageId}}"
                },
                "title": "Chapter 1",
                "type": "manuscript",
                "version": {
                  "id": "{{manuscriptVersionId}}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Manuscript Part"
        ],
        "summary": "Delete Manuscript Part",
        "description": "Delete a manuscript part.",
        "operationId": "deleteManuscriptPart",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Manuscript Part"
        ],
        "summary": "Update Manuscript Part",
        "description": "Update (patch) the content of a manuscript part.",
        "operationId": "updateManuscriptPart",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptPartId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "synopsis": {
                    "type": "string",
                    "example": "A short synopsis."
                  }
                }
              },
              "example": {
                "synopsis": "A short synopsis."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/manuscript_version/manuscript_parts": {
      "post": {
        "tags": [
          "Manuscript Part"
        ],
        "summary": "List Manuscript Parts By Manuscript Version",
        "description": "List all manuscript parts by a manuscript version given, filtered with a limit of entities shown and an offset.  \nLimit range is 0-50.  \nOffset should be non-negative.",
        "operationId": "listManuscriptPartsByManuscriptVersion",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptVersionId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/manuscript_version": {
      "get": {
        "tags": [
          "Manuscript Version"
        ],
        "summary": "Read Manuscript Version",
        "description": "Get the data of a single manuscript version.  \nGranularity range is -1 to 2.",
        "operationId": "readManuscriptVersion",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptVersionId}}"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "Manuscript Version"
        ],
        "summary": "Create Manuscript Version",
        "description": "Create a new manuscript version. Required parameters for the creation of this entity are \"manuscript\".",
        "operationId": "createManuscriptVersion",
        "parameters": [
          {
            "name": "",
            "in": "query",
            "schema": {
              "type": "string",
              "example": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "manuscript": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "{{manuscriptId}}"
                      }
                    }
                  },
                  "title": {
                    "type": "string",
                    "example": "Draft Version"
                  }
                }
              },
              "example": {
                "manuscript": {
                  "id": "{{manuscriptId}}"
                },
                "title": "Draft Version"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Manuscript Version"
        ],
        "summary": "Delete Manuscript Version",
        "description": "Delete a manuscript version.",
        "operationId": "deleteManuscriptVersion",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptVersionId}}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Manuscript Version"
        ],
        "summary": "Update Manuscript Version",
        "description": "Update (patch) the content of a manuscript version.",
        "operationId": "updateManuscriptVersion",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptVersionId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "activePart": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "{{manuscriptPartId}}"
                      }
                    }
                  }
                }
              },
              "example": {
                "activePart": {
                  "id": "{{manuscriptPartId}}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/manuscript/manuscript_versions": {
      "post": {
        "tags": [
          "Manuscript Version"
        ],
        "summary": "List Manuscript Versions By Manuscript",
        "description": "List all manuscript versions by a manuscript given, filtered with a limit of entities shown and an offset.  \nLimit range is 0-50.  \nOffset should be non-negative.",
        "operationId": "listManuscriptVersionsByManuscript",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/manuscript_tag": {
      "get": {
        "tags": [
          "Manuscript Tag"
        ],
        "summary": "Read Manuscript Tag",
        "description": "Get the data of a single manuscript tag.  \nGranularity range is -1 to 2.",
        "operationId": "readManuscriptTag",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptTagId}}"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "Manuscript Tag"
        ],
        "summary": "Create Manuscript Tag",
        "description": "Create a new manuscript tag. Required parameters for the creation of this entity are \"manuscript\".",
        "operationId": "createManuscriptTag",
        "parameters": [
          {
            "name": "",
            "in": "query",
            "schema": {
              "type": "string",
              "example": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "manuscript": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "{{manuscriptId}}"
                      }
                    }
                  },
                  "title": {
                    "type": "string",
                    "example": "Horror"
                  }
                }
              },
              "example": {
                "manuscript": {
                  "id": "{{manuscriptId}}"
                },
                "title": "Horror"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Manuscript Tag"
        ],
        "summary": "Delete Manuscript Tag",
        "description": "Delete a manuscript tag.",
        "operationId": "deleteManuscriptTag",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptTagId}}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Manuscript Tag"
        ],
        "summary": "Update Manuscript Tag",
        "description": "Update (patch) the content of a manuscript tag.",
        "operationId": "updateManuscriptTag",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptTagId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Gothic Horror"
                  }
                }
              },
              "example": {
                "title": "Gothic Horror"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/manuscript/manuscript_tags": {
      "post": {
        "tags": [
          "Manuscript Tag"
        ],
        "summary": "List Manuscript Tags By Manuscript",
        "description": "List all manuscript tags by a manuscript given, filtered with a limit of entities shown and an offset.  \nLimit range is 0-50.  \nOffset should be non-negative.",
        "operationId": "listManuscriptTagsByManuscript",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/manuscript_stat": {
      "get": {
        "tags": [
          "Manuscript Stat"
        ],
        "summary": "Read Manuscript Stat",
        "description": "Get the data of a single manuscript stat.  \nGranularity range is -1 to 2.",
        "operationId": "readManuscriptStat",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptStatId}}"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "Manuscript Stat"
        ],
        "summary": "Create Manuscript Stat",
        "description": "Create a new manuscript stat. Required parameters for the creation of this entity are \"version\" (manuscript version).",
        "operationId": "createManuscriptStat",
        "parameters": [
          {
            "name": "",
            "in": "query",
            "schema": {
              "type": "string",
              "example": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "notes": {
                    "type": "string",
                    "example": "Some notes."
                  },
                  "version": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "{{manuscriptVersionId}}"
                      }
                    }
                  }
                }
              },
              "example": {
                "notes": "Some notes.",
                "version": {
                  "id": "{{manuscriptVersionId}}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Manuscript Stat"
        ],
        "summary": "Delete Manuscript Stat",
        "description": "Delete a manuscript stat.",
        "operationId": "deleteManuscriptStat",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Manuscript Stat"
        ],
        "summary": "Update Manuscript Stat",
        "description": "Update (patch) the content of a manuscript stat.",
        "operationId": "updateManuscriptStat",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptStatId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "notes": {
                    "type": "string",
                    "example": "Some more notes."
                  }
                }
              },
              "example": {
                "notes": "Some more notes."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/manuscript_version/manuscript_stats": {
      "post": {
        "tags": [
          "Manuscript Stat"
        ],
        "summary": "List Manuscript Stats By Manuscript Version",
        "description": "List all manuscript stats by a manuscript version given, filtered with a limit of entities shown and an offset.  \nLimit range is 0-50.  \nOffset should be non-negative.",
        "operationId": "listManuscriptStatsByManuscriptVersion",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptVersionId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/manuscript_label": {
      "get": {
        "tags": [
          "Manuscript Label"
        ],
        "summary": "Read Manuscript Label",
        "description": "Get the data of a single manuscript label.  \nGranularity range is -1 to 2.",
        "operationId": "readManuscriptLabel",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptLabelId}}"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "Manuscript Label"
        ],
        "summary": "Create Manuscript Label",
        "description": "Create a new manuscript label. Required parameters for the creation of this entity are \"manuscript\".",
        "operationId": "createManuscriptLabel",
        "parameters": [
          {
            "name": "",
            "in": "query",
            "schema": {
              "type": "string",
              "example": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "color": {
                    "type": "string",
                    "example": "Lagoon Green"
                  },
                  "manuscript": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "{{manuscriptId}}"
                      }
                    }
                  }
                }
              },
              "example": {
                "color": "Lagoon Green",
                "manuscript": {
                  "id": "{{manuscriptId}}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Manuscript Label"
        ],
        "summary": "Delete Manuscript Label",
        "description": "Delete a manuscript label.",
        "operationId": "deleteManuscriptLabel",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptLabelId}}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Manuscript Label"
        ],
        "summary": "Update Manuscript Label",
        "description": "Update (patch) the content of a manuscript label.",
        "operationId": "updateManuscriptLabel",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptLabelId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fontcolor": {
                    "type": "string",
                    "example": "White"
                  }
                }
              },
              "example": {
                "fontcolor": "White"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/manuscript/manuscript_labels": {
      "post": {
        "tags": [
          "Manuscript Label"
        ],
        "summary": "List Manuscript Labels By Manuscript",
        "description": "List all manuscript labels by a manuscript given, filtered with a limit of entities shown and an offset.  \nLimit range is 0-50.  \nOffset should be non-negative.",
        "operationId": "listManuscriptLabelsByManuscript",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/manuscript_plot": {
      "get": {
        "tags": [
          "Manuscript Plot"
        ],
        "summary": "Read Manuscript Plot",
        "description": "Get the data of a single manuscript plot.  \nGranularity range is -1 to 2.",
        "operationId": "readManuscriptPlot",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptPlotId}}"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "Manuscript Plot"
        ],
        "summary": "Create Manuscript Plot",
        "description": "Create a new manuscript plot. Required parameters for the creation of this entity are \"version\" (manuscript version).",
        "operationId": "createManuscriptPlot",
        "parameters": [
          {
            "name": "",
            "in": "query",
            "schema": {
              "type": "string",
              "example": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Main Plot"
                  },
                  "version": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "{{manuscriptVersionId}}"
                      }
                    }
                  }
                }
              },
              "example": {
                "title": "Main Plot",
                "version": {
                  "id": "{{manuscriptVersionId}}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Manuscript Plot"
        ],
        "summary": "Delete Manuscript Plot",
        "description": "Delete a manuscript plot.",
        "operationId": "deleteManuscriptPlot",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptPlotId}}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Manuscript Plot"
        ],
        "summary": "Update Manuscript Plot",
        "description": "Update (patch) the content of a manuscript plot.",
        "operationId": "updateManuscriptPlot",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptPlotId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "example": "A description."
                  }
                }
              },
              "example": {
                "description": "A description."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/manuscript_version/manuscript_plots": {
      "post": {
        "tags": [
          "Manuscript Plot"
        ],
        "summary": "List Manuscript Plots By Manuscript Version",
        "description": "List all manuscript plots by a manuscript version given, filtered with a limit of entities shown and an offset.  \nLimit range is 0-50.  \nOffset should be non-negative.",
        "operationId": "listManuscriptPlotsByManuscriptVersion",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{manuscriptVersionId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/notebook": {
      "get": {
        "tags": [
          "Notebook"
        ],
        "summary": "Read Notebook",
        "description": "Retrieve the metadata of a single notebook. The returned fields depend on the give granularity.",
        "operationId": "readNotebook",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The notebook object. The included fields depend on the chosen granularity.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1notebook/put/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "title": "Notebook Reference Schema - GR 0",
                      "description": "Adds the creation date and the rest of the metadata fields.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Notebook Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "nullable": true
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Notebook"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "nullable": true,
                          "example": "fa-solid fa-notebook"
                        },
                        "url": {
                          "type": "string",
                          "nullable": true,
                          "example": "http://www.worldanvil.com/notebook/notebook/<uuid>/load"
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "color": {
                          "type": "string",
                          "format": "hexcolor",
                          "example": "#000000"
                        },
                        "weight": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "isSelected": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Notebook Reference Schema - GR 2",
                      "description": "Adds relationship properties for note sections, cover, campaign, world and author.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Notebook Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "nullable": true
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Notebook"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "nullable": true,
                          "example": "fa-solid fa-notebook"
                        },
                        "url": {
                          "type": "string",
                          "nullable": true,
                          "example": "http://www.worldanvil.com/notebook/notebook/<uuid>/load"
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "color": {
                          "type": "string",
                          "format": "hexcolor",
                          "example": "#000000"
                        },
                        "weight": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "isSelected": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "notesections": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1notesection/put/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "cover": {
                          "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                        },
                        "campaign": {
                          "type": "object",
                          "title": "Campaign Reference Schema - GR -1",
                          "description": "The reference schema for an article. Only contains the minimum amount of information to identify the article.",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "title": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string",
                              "example": "AkneV6EROWJAg7ifmizDsD7rfiXGHR"
                            },
                            "state": {
                              "type": "string",
                              "enum": [
                                "private",
                                "public"
                              ]
                            },
                            "isWip": {
                              "type": "boolean",
                              "nullable": true,
                              "example": null
                            },
                            "isDraft": {
                              "type": "boolean",
                              "nullable": true,
                              "example": null
                            },
                            "entityClass": {
                              "type": "string",
                              "enum": [
                                "Campaign"
                              ]
                            },
                            "icon": {
                              "type": "string",
                              "enum": [
                                "fa-solid fa-swords"
                              ]
                            },
                            "url": {
                              "type": "string",
                              "example": "http://www.worldanvil.com/w/<world-title>-<username>/rpg/<uuid>"
                            },
                            "subscribergroups": {
                              "type": "array",
                              "example": [],
                              "items": {
                                "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                              }
                            },
                            "folderId": {
                              "type": "string",
                              "enum": [
                                "-1"
                              ]
                            },
                            "tags": {
                              "type": "string",
                              "nullable": true,
                              "example": "tag,tag2"
                            },
                            "updateDate": {
                              "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                            }
                          }
                        },
                        "world": {
                          "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                        },
                        "author": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Notebook"
        ],
        "summary": "Create Notebook",
        "description": "Create a new notebook. The notebook requires a title to be created.",
        "operationId": "createNotebook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Notebook Creation Schema",
                "description": "All the fields that can be used to create a notebook.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Notebook Title"
                  },
                  "tags": {
                    "type": "string",
                    "nullable": true
                  },
                  "color": {
                    "type": "string",
                    "format": "hexcolor",
                    "example": "#000000"
                  },
                  "weight": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "isSelected": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "cover": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "campaign": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                },
                "required": [
                  "title"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference object of the created notebook.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Notebook Reference Schema - GR -1",
                  "description": "The reference schema for a notebook. Only contains the minimum amount of information to identify the notebook.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "title": {
                      "type": "string",
                      "example": "Notebook Title"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true
                    },
                    "state": {
                      "type": "string",
                      "nullable": true
                    },
                    "isWip": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "isDraft": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "Notebook"
                      ]
                    },
                    "icon": {
                      "type": "string",
                      "nullable": true,
                      "example": "fa-solid fa-notebook"
                    },
                    "url": {
                      "type": "string",
                      "nullable": true,
                      "example": "http://www.worldanvil.com/notebook/notebook/<uuid>/load"
                    },
                    "subscribergroups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      },
                      "example": []
                    },
                    "folderId": {
                      "type": "string",
                      "format": "uuid",
                      "nullable": true
                    },
                    "tags": {
                      "type": "string",
                      "nullable": true
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    },
                    "isEditable": {
                      "type": "boolean",
                      "readOnly": true
                    },
                    "success": {
                      "type": "boolean",
                      "readOnly": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Notebook"
        ],
        "summary": "Delete Notebook",
        "description": "Delete a notebook.",
        "operationId": "deleteNotebook",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notebook was deleted with success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Notebook"
        ],
        "summary": "Update Notebook",
        "description": "Update (patch) the content of a notebook.",
        "operationId": "updateNotebook",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Notebook Update Schema",
                "description": "All the fields that can be used to update a notebook.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Notebook Title"
                  },
                  "tags": {
                    "type": "string",
                    "nullable": true
                  },
                  "color": {
                    "type": "string",
                    "format": "hexcolor",
                    "example": "#000000"
                  },
                  "weight": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "isSelected": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "cover": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "campaign": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference object of the updated notebook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1notebook/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/world/notebooks": {
      "post": {
        "tags": [
          "Notebook"
        ],
        "summary": "List Notebooks By World",
        "description": "THIS WILL BE REPLACED WITH A /user/notebooks ENDPOINT IN THE FUTURE. DOES NOT WORK CURRENTLY. Get notebooks directly.\nRetrieve a list of notebooks within a world. The list is limited by the limit and offset parameters.",
        "operationId": "listNotebooksByWorld",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of notebook objects. Starting at the offset and limited by the limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1notebook/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/notesection": {
      "get": {
        "tags": [
          "Notesection"
        ],
        "summary": "Read Notesection",
        "description": "Retrieve the metadata of a single notesection. The returned fields depend on the give granularity.",
        "operationId": "readNotesection",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The notesection object. The included fields depend on the chosen granularity.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1notesection/put/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "title": "Note Section Reference Schema - GR 0",
                      "description": "Adds the creation date and the rest of the metadata fields.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Note Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Notesection"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "nullable": true,
                          "example": "fas fa-notes"
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "color": {
                          "type": "string",
                          "format": "hexcolor",
                          "example": "#000000"
                        },
                        "weight": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "isSelected": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Note Section Reference Schema - GR 2",
                      "description": "Adds the notes, parent notebook and author to the output.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Note Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Notesection"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "nullable": true,
                          "example": "fas fa-notes"
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "color": {
                          "type": "string",
                          "format": "hexcolor",
                          "example": "#000000"
                        },
                        "weight": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "isSelected": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "notes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1note/put/responses/200/content/application~1json/schema"
                          }
                        },
                        "notebook": {
                          "$ref": "#/paths/~1notebook/put/responses/200/content/application~1json/schema"
                        },
                        "author": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Notesection"
        ],
        "summary": "Create Notesection",
        "description": "Create a new notesection. The notesection requires a title and a notebook id to be created. Check the notesection schema for the available fields.",
        "operationId": "createNotesection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Note Section Creation Schema",
                "description": "These are the fields that can be added on creation.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Note Title"
                  },
                  "color": {
                    "type": "string",
                    "format": "hexcolor",
                    "example": "#000000"
                  },
                  "weight": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "isSelected": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "notebook": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                },
                "required": [
                  "title",
                  "notebook"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference object of the created notesection.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Note Section Reference Schema - GR -1",
                  "description": "The reference schema for an note section. Only contains the minimum amount of information to identify the note section.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "title": {
                      "type": "string",
                      "example": "Note Section Title"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true
                    },
                    "state": {
                      "type": "string",
                      "nullable": true
                    },
                    "url": {
                      "type": "string",
                      "nullable": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "Notesection"
                      ]
                    },
                    "icon": {
                      "type": "string",
                      "nullable": true,
                      "example": "fas fa-notes"
                    },
                    "subscribergroups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      },
                      "example": []
                    },
                    "isEditable": {
                      "type": "boolean",
                      "readOnly": true
                    },
                    "success": {
                      "type": "boolean",
                      "readOnly": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Notesection"
        ],
        "summary": "Delete Notesection",
        "description": "Delete a notesection.",
        "operationId": "deleteNotesection",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Notesection"
        ],
        "summary": "Update Notesection",
        "description": "Update a notesection. Only the given fields will be updated. All other fields will remain unchanged. Check the notesection schema for the available fields.",
        "operationId": "updateNotesection",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Note Section Update Schema",
                "description": "These are the fields that can be edited on a note section.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Note Title"
                  },
                  "color": {
                    "type": "string",
                    "format": "hexcolor",
                    "example": "#000000"
                  },
                  "weight": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "isSelected": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "notebook": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference object of the updated notesection.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1notesection/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/notebook/notesections": {
      "post": {
        "tags": [
          "Notesection"
        ],
        "summary": "List Notesections By Notebook",
        "description": "Retrieve a list of notesections within a notebook. The list is limited by the limit and offset parameters.",
        "operationId": "listNotesectionsByNotebook",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of notesection objects. Starting at the offset and limited by the limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1notesection/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/note": {
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "Read Note",
        "description": "Retrieve the metadata of a single note. The returned fields depend on the give granularity.",
        "operationId": "readNote",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The note object. The included fields depend on the chosen granularity.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1note/put/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "title": "Note Reference Schema - GR 0",
                      "description": "Contains all the content and metadata fields of a note.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Note Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "nullable": true
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Note"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "nullable": true,
                          "example": "fa-solid fa-notes"
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "content": {
                          "type": "string",
                          "example": "Note Content"
                        },
                        "importance": {
                          "type": "string",
                          "nullable": true
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "color": {
                          "type": "string",
                          "nullable": true
                        },
                        "weight": {
                          "type": "string",
                          "nullable": true
                        },
                        "isSelected": {
                          "type": "integer",
                          "format": "int32",
                          "enum": [
                            0,
                            1
                          ]
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Note Reference Schema - GR 2",
                      "description": "Contains all the fields of the note, including its relations to other entities.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Note Title"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "nullable": true
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Note"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "nullable": true,
                          "example": "fa-solid fa-notes"
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "content": {
                          "type": "string",
                          "example": "Note Content"
                        },
                        "importance": {
                          "type": "string",
                          "nullable": true
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "color": {
                          "type": "string",
                          "nullable": true
                        },
                        "weight": {
                          "type": "string",
                          "nullable": true
                        },
                        "isSelected": {
                          "type": "integer",
                          "format": "int32",
                          "enum": [
                            0,
                            1
                          ]
                        },
                        "image": {
                          "type": "string",
                          "nullable": true
                        },
                        "campaign": {
                          "type": "string",
                          "nullable": true
                        },
                        "session": {
                          "type": "string",
                          "nullable": true
                        },
                        "author": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                        },
                        "world": {
                          "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                        },
                        "article": {
                          "type": "string",
                          "nullable": true
                        },
                        "notesection": {
                          "$ref": "#/paths/~1notesection/put/responses/200/content/application~1json/schema"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Note"
        ],
        "summary": "Create Note",
        "description": "Create a new note. The note requires a title and a notesection id to be created.",
        "operationId": "createNote",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Note Create Schema",
                "description": "The fields that can be used to create a note and the required fields.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Note Title"
                  },
                  "tags": {
                    "type": "string",
                    "nullable": true
                  },
                  "content": {
                    "type": "string",
                    "example": "Note Content"
                  },
                  "importance": {
                    "type": "string",
                    "nullable": true
                  },
                  "color": {
                    "type": "string",
                    "nullable": true,
                    "format": "hexcolor"
                  },
                  "weight": {
                    "type": "number",
                    "format": "int32"
                  },
                  "isSelected": {
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                      0,
                      1
                    ]
                  },
                  "campaign": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "session": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "article": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "notesection": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                },
                "required": [
                  "title",
                  "notesection"
                ]
              },
              "example": {
                "title": "Character Notes",
                "content": "Background: Acolyte, Class: Sorcerer, Race: Elf ",
                "notesection": {
                  "id": ""
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The reference object of the created note.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Note Reference Schema - GR -1",
                  "description": "The reference schema for an note. Only contains the minimum amount of information to identify the note.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "title": {
                      "type": "string",
                      "example": "Note Title"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true
                    },
                    "state": {
                      "type": "string",
                      "nullable": true
                    },
                    "isWip": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "isDraft": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "Note"
                      ]
                    },
                    "icon": {
                      "type": "string",
                      "nullable": true,
                      "example": "fa-solid fa-notes"
                    },
                    "url": {
                      "type": "string",
                      "nullable": true
                    },
                    "subscribergroups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      },
                      "example": []
                    },
                    "folderId": {
                      "type": "string",
                      "format": "uuid",
                      "nullable": true
                    },
                    "tags": {
                      "type": "string",
                      "nullable": true
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    },
                    "isEditable": {
                      "type": "boolean",
                      "readOnly": true
                    },
                    "success": {
                      "type": "boolean",
                      "readOnly": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Note"
        ],
        "summary": "Delete Note",
        "description": "Delete a note. This action cannot be undone.",
        "operationId": "deleteNote",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete the note successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Note"
        ],
        "summary": "Update Note",
        "description": "Change the metadata and content of a note. Check the schema for the available fields.",
        "operationId": "updateNote",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Note Update Schema",
                "description": "The fields that can be used updated on a note.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Note Title"
                  },
                  "tags": {
                    "type": "string",
                    "nullable": true
                  },
                  "content": {
                    "type": "string",
                    "example": "Note Content"
                  },
                  "importance": {
                    "type": "string",
                    "nullable": true
                  },
                  "color": {
                    "type": "string",
                    "nullable": true,
                    "format": "hexcolor"
                  },
                  "weight": {
                    "type": "number",
                    "format": "int32"
                  },
                  "isSelected": {
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                      0,
                      1
                    ]
                  },
                  "campaign": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "session": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "article": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "notesection": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The reference object of the updated note.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1note/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/notesection/notes": {
      "post": {
        "tags": [
          "Note"
        ],
        "summary": "List Notes By Notesection",
        "description": "Retrieve a list of notes within a notesection. The list is limited by the limit and offset parameters.",
        "operationId": "listNotesByNotesection",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of note objects. Starting at the offset and limited by the limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1note/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/secret": {
      "get": {
        "tags": [
          "Secret"
        ],
        "summary": "Read Secret",
        "description": "Retrieve the metadata of a single secret. The returned fields depend on the give granularity.",
        "operationId": "readSecret",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The secret object. The included fields depend on the chosen granularity.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1secret/put/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "title": "Secret Reference Schema - GR 0",
                      "description": "A secret with the basic metadata and the content field.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "A Secret"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "public",
                            "private"
                          ]
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Secret"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-user-secret"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "example": "https://worldanvil.com/world/secret/<secretId>/edit"
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          }
                        },
                        "folderId": {
                          "type": "string",
                          "nullable": true,
                          "example": "null"
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true,
                          "example": "null"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "content": {
                          "type": "string",
                          "example": "Secret Content"
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Secret Reference Schema - GR 2",
                      "description": "A secret with the basic metadata, the content and all the relationships to other resources. This schema contains all the fields of the secret.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "A Secret"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "public",
                            "private"
                          ]
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Secret"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-user-secret"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "example": "https://worldanvil.com/world/secret/<secretId>/edit"
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          }
                        },
                        "folderId": {
                          "type": "string",
                          "nullable": true,
                          "example": "null"
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true,
                          "example": "null"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "content": {
                          "type": "string",
                          "example": "Secret Content"
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "author": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                        },
                        "article": {
                          "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                        },
                        "world": {
                          "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                        },
                        "editURL": {
                          "type": "string",
                          "example": "https://worldanvil.com/world/secret/<secretId>/edit"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Secret"
        ],
        "summary": "Create Secret",
        "description": "Create a new secret. The secret requires a title and a world id to be created.",
        "operationId": "createSecret",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Secret Create Schema",
                "description": "All the fields which can be added when creating a secret and the required fields.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "A Secret"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "public",
                      "private"
                    ]
                  },
                  "subscribergroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  },
                  "tags": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string",
                    "example": "Secret Content"
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "article": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                },
                "required": [
                  "title",
                  "world"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the reference object of the created secret.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Secret Reference Schema - GR -1",
                  "description": "The reference schema for a secret. Only contains the minimum amount of information to identify the secret.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "title": {
                      "type": "string",
                      "example": "A Secret"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "public",
                        "private"
                      ]
                    },
                    "isWip": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "isDraft": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "Secret"
                      ]
                    },
                    "icon": {
                      "type": "string",
                      "enum": [
                        "fa-solid fa-user-secret"
                      ]
                    },
                    "url": {
                      "type": "string",
                      "example": "https://worldanvil.com/world/secret/<secretId>/edit"
                    },
                    "subscribergroups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      }
                    },
                    "folderId": {
                      "type": "string",
                      "nullable": true,
                      "example": "null"
                    },
                    "tags": {
                      "type": "string",
                      "nullable": true,
                      "example": "null"
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    },
                    "isEditable": {
                      "type": "boolean",
                      "readOnly": true
                    },
                    "success": {
                      "type": "boolean",
                      "readOnly": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Secret"
        ],
        "summary": "Delete Secret",
        "description": "Delete a secret. This action is irreversible.",
        "operationId": "deleteSecret",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Secret"
        ],
        "summary": "Update Secret",
        "description": "Update the metadata and content of a secret. Check the schema for the fields which can be updated.",
        "operationId": "updateSecret",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Secret Update Schema",
                "description": "All the fields which can be updated on a secret.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "A Secret"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "public",
                      "private"
                    ]
                  },
                  "subscribergroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  },
                  "tags": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string",
                    "example": "Secret Content"
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "article": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the reference object of the updated secret.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1secret/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/world/secrets": {
      "post": {
        "tags": [
          "Secret"
        ],
        "summary": "List Secrets By World",
        "description": "Retrieve a list of secrets within a world. Use offset to skip the first n elements of the result, and limit to specify the maximum number of elements to retrieve.",
        "operationId": "listSecretsByWorld",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of secrets within the limit at the offset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1secret/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/subscribergroup": {
      "get": {
        "tags": [
          "Subscribergroup"
        ],
        "summary": "Read Subscribergroup",
        "description": "Retrieve the metadata of a subscriber group. Use the granularity parameter to specify the amount of data you want to receive.",
        "operationId": "readSubscribergroup",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "1"
              ],
              "example": "-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested subscriber group. The included fields depend on the chosen granularity.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "title": "SubscriberGroup Reference Schema - GR 0",
                      "description": "The subscriber group schema with its core settings and metadata.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Campaign Players"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true,
                          "readOnly": true
                        },
                        "state": {
                          "type": "string",
                          "nullable": true,
                          "readOnly": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "SubscriberGroup"
                          ],
                          "readOnly": true
                        },
                        "icon": {
                          "type": "string",
                          "nullable": true,
                          "readOnly": true
                        },
                        "url": {
                          "type": "string",
                          "nullable": true,
                          "readOnly": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "example": [],
                          "readOnly": true,
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          }
                        },
                        "folderId": {
                          "type": "string",
                          "nullable": true,
                          "example": "-1"
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true,
                          "example": "tag1,tag2,tag3"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "example": "A subscriber group for the players of the campaign."
                        },
                        "position": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 0
                        },
                        "isDefault": {
                          "type": "boolean",
                          "example": false
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "SubscriberGroup Reference Schema - GR 1",
                      "description": "The full subscribergroup schema with all the metadata fields. Is returned when the granularity is set to 1.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "Campaign Players"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true,
                          "readOnly": true
                        },
                        "state": {
                          "type": "string",
                          "nullable": true,
                          "readOnly": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "SubscriberGroup"
                          ],
                          "readOnly": true
                        },
                        "icon": {
                          "type": "string",
                          "nullable": true,
                          "readOnly": true
                        },
                        "url": {
                          "type": "string",
                          "nullable": true,
                          "readOnly": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "example": [],
                          "readOnly": true,
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          }
                        },
                        "folderId": {
                          "type": "string",
                          "nullable": true,
                          "example": "-1"
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true,
                          "example": "tag1,tag2,tag3"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "example": "A subscriber group for the players of the campaign."
                        },
                        "position": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 0
                        },
                        "isDefault": {
                          "type": "boolean",
                          "example": false
                        },
                        "creationDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "isHidden": {
                          "type": "boolean",
                          "example": false
                        },
                        "isAssignable": {
                          "type": "boolean",
                          "example": false
                        },
                        "campaign": {
                          "type": "string",
                          "readOnly": true
                        },
                        "party": {
                          "type": "string",
                          "readOnly": true
                        },
                        "world": {
                          "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                        },
                        "paidsubscribers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                          }
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Subscribergroup"
        ],
        "summary": "Create Subscribergroup",
        "description": "Create a new subscriber group. To create a subscriber group you need a title and the id of the world it should be created in. Check the schema for all available fields.",
        "operationId": "createSubscribergroup",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "SubscriberGroup Create Schema",
                "description": "The schema for creating a subscriber group.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Campaign Players"
                  },
                  "tags": {
                    "type": "string",
                    "nullable": true,
                    "example": "tag1,tag2,tag3"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "example": "A subscriber group for the players of the campaign."
                  },
                  "position": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  },
                  "isDefault": {
                    "type": "boolean",
                    "example": false
                  },
                  "isHidden": {
                    "type": "boolean",
                    "example": false
                  },
                  "isAssignable": {
                    "type": "boolean",
                    "example": false
                  },
                  "paidsubscribers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                },
                "required": [
                  "title",
                  "world"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Subscribergroup"
        ],
        "summary": "Delete Subscribergroup",
        "description": "Delete a subscriber group. This action is not reversible.",
        "operationId": "deleteSubscribergroup",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion of the subscriber group was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Subscribergroup"
        ],
        "summary": "Update Subscribergroup",
        "description": "Update the metadata of a subscriber group. Check the schema for all available fields.",
        "operationId": "updateSubscribergroup",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "SubscriberGroup Update Schema",
                "description": "All the fields in subscriber groups that can be updated.",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Campaign Players"
                  },
                  "tags": {
                    "type": "string",
                    "nullable": true,
                    "example": "tag1,tag2,tag3"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "example": "A subscriber group for the players of the campaign."
                  },
                  "position": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  },
                  "isDefault": {
                    "type": "boolean",
                    "example": false
                  },
                  "isHidden": {
                    "type": "boolean",
                    "example": false
                  },
                  "isAssignable": {
                    "type": "boolean",
                    "example": false
                  },
                  "paidsubscribers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "title": "Campaign Players"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated the subscriber group successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SubscriberGroup Reference Schema - GR -1",
                  "description": "The most basic subscriber group schema, it just contains the most basic metadata. Is returned when the granularity is set to -1 and is used as a reference in the other schemas.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "title": {
                      "type": "string",
                      "example": "Campaign Players"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "state": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "SubscriberGroup"
                      ],
                      "readOnly": true
                    },
                    "icon": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "url": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "subscribergroups": {
                      "type": "array",
                      "example": [],
                      "readOnly": true,
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      }
                    },
                    "folderId": {
                      "type": "string",
                      "nullable": true,
                      "example": "-1"
                    },
                    "tags": {
                      "type": "string",
                      "nullable": true,
                      "example": "tag1,tag2,tag3"
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    },
                    "isEditable": {
                      "type": "boolean",
                      "readOnly": true
                    },
                    "success": {
                      "type": "boolean",
                      "readOnly": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/world/subscribergroups": {
      "post": {
        "tags": [
          "Subscribergroup"
        ],
        "summary": "List Subscribergroups By World",
        "description": "Retrieve a list of subscriber groups within a world. Use offset to skip the first n elements of the result, and limit to specify the maximum number of elements to retrieve.",
        "operationId": "listSubscribergroupsByWorld",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of subscriber group metadata resources within the limit at the offset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/variable": {
      "get": {
        "tags": [
          "Variable"
        ],
        "summary": "Read Variable",
        "description": "Get the data of a single variable.  \nGranularity range is -1 to 2.",
        "operationId": "readVariable",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{variableId}}"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Variable"
        ],
        "summary": "Create Variable",
        "description": "Create a new variable. Required parameters for the creation of this entity are \"title\", \"templateType\" and \"world\".",
        "operationId": "createVariable",
        "parameters": [
          {
            "name": "",
            "in": "query",
            "schema": {
              "type": "string",
              "example": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "collection": {
                    "type": "string",
                    "example": "{{variableCollectionId}}"
                  },
                  "k": {
                    "type": "string",
                    "example": "key"
                  },
                  "type": {
                    "type": "string",
                    "example": "string"
                  },
                  "v": {
                    "type": "string",
                    "example": "value"
                  },
                  "world": {
                    "type": "string",
                    "example": "{{worldId}}"
                  }
                }
              },
              "example": {
                "collection": "{{variableCollectionId}}",
                "k": "key",
                "type": "string",
                "v": "value",
                "world": "{{worldId}}"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Variable"
        ],
        "summary": "Delete Variable",
        "description": "Delete a variable.",
        "operationId": "deleteVariable",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{variableId}}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Variable"
        ],
        "summary": "Update Variable",
        "description": "Update (patch) the content of a variable.",
        "operationId": "updateVariable",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{{variableId}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "A key value pair"
                  }
                }
              },
              "example": {
                "title": "A key value pair"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/variable_collection/variables": {
      "post": {
        "tags": [
          "Variable"
        ],
        "summary": "List Variables By Variable Collection",
        "description": "Retrieve a list of variables within a variable collection. Use offset to skip the first n elements of the result, and limit to specify the maximum number of elements to retrieve.",
        "operationId": "listVariablesByVariableCollection",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of variable metadata resources within the limit at the offset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/variable_collection": {
      "get": {
        "tags": [
          "Variable Collection"
        ],
        "summary": "Read Variable Collection",
        "description": "Retrieve the metadata, content and relationships of a variable collection. The returned fields are determined by the granularity parameter.",
        "operationId": "readVariableCollection",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested variable collection.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1variable_collection/put/responses/200/content/application~1json/schema"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "isEditable": {
                              "type": "boolean",
                              "example": true
                            },
                            "success": {
                              "type": "boolean",
                              "example": true
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1variable_collection/get/responses/200/content/application~1json/schema/oneOf/0"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string",
                              "example": "This description describes the purpose of this collection."
                            },
                            "prefix": {
                              "type": "string",
                              "example": "prefix"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/paths/~1variable_collection/get/responses/200/content/application~1json/schema/oneOf/1"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "world": {
                              "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "Variable Collection"
        ],
        "summary": "Create Variable Collection",
        "description": "Create a new variable collection. Required parameters for the creation of this entity are \"title\" and \"world\".",
        "operationId": "createVariableCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema":  {
                "allOf": [
                  {
                    "$ref": "#/paths/~1variable_collection/patch/requestBody/content/application~1json/schema"
                  },
                  {
                    "type": "object",
                    "title": "Variable Collection - Create",
                    "required": [
                      "title",
                      "world"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The reference to the newly created variable collection.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Variable Collection - GR -1",
                  "description": "Basic metadata of a variable collection.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "readOnly": true
                    },
                    "title": {
                      "type": "string",
                      "example": "Variable Collection Title"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "public"
                      ]
                    },
                    "isWip": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "isDraft": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "VariableCollection"
                      ],
                      "readOnly": true
                    },
                    "icon": {
                      "type": "string",
                      "enum": [
                        "fa-solid fa-abacus"
                      ],
                      "readOnly": true
                    },
                    "url": {
                      "type": "string",
                      "example": "http://www.worldanvil.com/world/variables/collection/<collection-id>/variables",
                      "readOnly": true
                    },
                    "subscribergroups": {
                      "type": "array",
                      "example": [],
                      "readOnly": true,
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      }
                    },
                    "folderId": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "tags": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "Variable Collection"
        ],
        "summary": "Delete Variable Collection",
        "description": "Delete a variable collection. This will also delete all variables that are part of this collection.",
        "operationId": "deleteVariableCollection",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Variable collection deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "Variable Collection"
        ],
        "summary": "Update Variable Collection",
        "description": "Update the metadata, content and relationships of a variable collection. Check the schemas for the fields that can be updated.",
        "operationId": "updateVariableCollection",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Variable Collection - Update",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Variable Collection Title"
                  },
                  "description": {
                    "type": "string",
                    "example": "This description describes the purpose of this collection."
                  },
                  "prefix": {
                    "type": "string",
                    "example": "prefix"
                  },
                  "world": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "00000000-0000-0000-0000-000000000000"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated variable collection.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1variable_collection/patch/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/world/variablecollections": {
      "post": {
        "tags": [
          "Variable Collection"
        ],
        "summary": "List  Variable Collection By World",
        "description": "Retrieve a list of variable collections within a world. Use offset to skip the first n elements of the result, and limit to specify the maximum number of elements to retrieve.",
        "operationId": "listVariableCollectionByWorld",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of variable collections within the limit at the offset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1variable_collection/put/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Read User",
        "description": "Retrieve the metadata of a user. Use the granularity parameter to specify the amount of data you want to receive.",
        "operationId": "readUser",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "2"
              ],
              "example": "-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A user object. The included fields depend on the chosen granularity.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "title": "User Reference Schema - GR 0",
                      "description": "The full user schema with all the metadata fields and account settings. Is returned when the granularity is set to 0.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": false
                        },
                        "title": {
                          "type": "string",
                          "example": "Username"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true,
                          "readOnly": true
                        },
                        "state": {
                          "type": "string",
                          "nullable": true,
                          "readOnly": true
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true,
                          "readOnly": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true,
                          "readOnly": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "User"
                          ],
                          "readOnly": true
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-user"
                          ],
                          "readOnly": true
                        },
                        "url": {
                          "type": "string",
                          "example": "https://worldanvil.com/author/username",
                          "readOnly": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          },
                          "example": []
                        },
                        "folderId": {
                          "type": "string",
                          "nullable": true,
                          "example": "-1",
                          "readOnly": true
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true,
                          "readOnly": true
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "enabled": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "token": {
                          "type": "string",
                          "nullable": true,
                          "readOnly": true
                        },
                        "username": {
                          "type": "string"
                        },
                        "firstname": {
                          "type": "string",
                          "nullable": true
                        },
                        "lastname": {
                          "type": "string",
                          "nullable": true
                        },
                        "lastLogin": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "bio": {
                          "type": "string"
                        },
                        "locale": {
                          "type": "string"
                        },
                        "signature": {
                          "type": "string"
                        },
                        "customProfileContent": {
                          "type": "string"
                        },
                        "registerDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "membershipDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "membership": {
                          "type": "boolean"
                        },
                        "membershipType": {
                          "type": "string",
                          "readOnly": true
                        },
                        "websiteurl": {
                          "type": "string",
                          "nullable": true
                        },
                        "favMovies": {
                          "type": "string",
                          "nullable": true
                        },
                        "favSeries": {
                          "type": "string",
                          "nullable": true
                        },
                        "favBooks": {
                          "type": "string",
                          "nullable": true
                        },
                        "favWriters": {
                          "type": "string",
                          "nullable": true
                        },
                        "favGames": {
                          "type": "string",
                          "nullable": true
                        },
                        "interests": {
                          "type": "string",
                          "nullable": true
                        },
                        "nanowrimo": {
                          "type": "string",
                          "nullable": true
                        },
                        "twitter": {
                          "type": "string",
                          "nullable": true
                        },
                        "facebook": {
                          "type": "string",
                          "nullable": true
                        },
                        "reddit": {
                          "type": "string",
                          "nullable": true
                        },
                        "tumblr": {
                          "type": "string",
                          "nullable": true
                        },
                        "pinterest": {
                          "type": "string",
                          "nullable": true
                        },
                        "deviantart": {
                          "type": "string",
                          "nullable": true
                        },
                        "youtube": {
                          "type": "string",
                          "nullable": true
                        },
                        "vimeo": {
                          "type": "string",
                          "nullable": true
                        },
                        "google": {
                          "type": "string",
                          "nullable": true
                        },
                        "steam": {
                          "type": "string",
                          "nullable": true
                        },
                        "twitch": {
                          "type": "string",
                          "nullable": true
                        },
                        "discord": {
                          "type": "string",
                          "nullable": true
                        },
                        "instagram": {
                          "type": "string",
                          "nullable": true
                        },
                        "kofi": {
                          "type": "string"
                        },
                        "patreon": {
                          "type": "string",
                          "nullable": true
                        },
                        "views": {
                          "type": "integer",
                          "format": "int32",
                          "readOnly": true
                        },
                        "openText": {
                          "type": "string",
                          "nullable": true
                        },
                        "profileMeta": {
                          "type": "string",
                          "nullable": true
                        },
                        "isVenerable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "isPremier": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "isLifetime": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "anvilCoinsCurrent": {
                          "type": "integer",
                          "format": "int32",
                          "readOnly": true
                        },
                        "email": {
                          "type": "string",
                          "readOnly": true
                        },
                        "timezone": {
                          "type": "string"
                        },
                        "location": {
                          "type": "string"
                        },
                        "dob": {
                          "type": "string",
                          "nullable": true,
                          "readOnly": true
                        },
                        "worldsLimit": {
                          "type": "integer",
                          "format": "int32",
                          "readOnly": true
                        },
                        "campaignsLimit": {
                          "type": "integer",
                          "format": "int32",
                          "readOnly": true
                        },
                        "uploadSizeLimit": {
                          "type": "integer",
                          "format": "int32",
                          "readOnly": true
                        },
                        "storageSpaceLimit": {
                          "type": "string",
                          "readOnly": true
                        },
                        "coauthors": {
                          "type": "integer",
                          "format": "int32",
                          "readOnly": true
                        },
                        "subscriberSlots": {
                          "type": "integer",
                          "format": "int32",
                          "readOnly": true
                        },
                        "allowAdultContent": {
                          "type": "boolean"
                        },
                        "featureWorldbuilding": {
                          "type": "integer",
                          "format": "int32",
                          "enum": [
                            0,
                            1
                          ]
                        },
                        "featureRPG": {
                          "type": "integer",
                          "format": "int32",
                          "enum": [
                            0,
                            1
                          ]
                        },
                        "featureCommunity": {
                          "type": "integer",
                          "format": "int32",
                          "enum": [
                            0,
                            1
                          ]
                        },
                        "featureHeroes": {
                          "type": "integer",
                          "format": "int32",
                          "enum": [
                            0,
                            1
                          ]
                        },
                        "featureWriting": {
                          "type": "integer",
                          "format": "int32",
                          "enum": [
                            0,
                            1
                          ]
                        },
                        "featurePrompts": {
                          "type": "integer",
                          "format": "int32",
                          "enum": [
                            0,
                            1
                          ]
                        },
                        "featureAutosave": {
                          "type": "integer",
                          "format": "int32",
                          "enum": [
                            0,
                            1
                          ]
                        },
                        "featureExpandedArticle": {
                          "type": "integer",
                          "format": "int32",
                          "enum": [
                            0,
                            1
                          ]
                        },
                        "interfaceVersion": {
                          "type": "integer",
                          "format": "int32",
                          "enum": [
                            0,
                            1,
                            2
                          ]
                        },
                        "interfaceVignetteRows": {
                          "type": "string"
                        },
                        "interfaceFormBackground": {
                          "type": "string"
                        },
                        "interfaceFormColor": {
                          "type": "string"
                        },
                        "interfaceFormFontSize": {
                          "type": "string"
                        },
                        "interfaceActivateAdvancedSelect": {
                          "type": "boolean"
                        },
                        "interfaceActivateAccessibility": {
                          "type": "boolean"
                        },
                        "manuscriptSettings": {
                          "type": "object",
                          "properties": {
                            "fontSize": {
                              "type": "string"
                            },
                            "lineHeight": {
                              "type": "string"
                            },
                            "paragraphyPadding": {
                              "type": "string"
                            },
                            "cssRules": {
                              "type": "string"
                            },
                            "fontTypeface": {
                              "type": "string"
                            },
                            "paragraphIndent": {
                              "type": "string"
                            },
                            "backgroundColor": {
                              "type": "string"
                            },
                            "fontColor": {
                              "type": "string"
                            },
                            "paragraphPadding": {
                              "type": "string"
                            }
                          }
                        },
                        "interfaceTheme": {
                          "type": "string"
                        },
                        "interfaceEditor": {
                          "type": "string"
                        },
                        "interfaceEditorMode": {
                          "type": "string"
                        },
                        "interfaceEditorTheme": {
                          "type": "string"
                        },
                        "interfaceShowSaveIndicator": {
                          "type": "boolean"
                        },
                        "discordToken": {
                          "type": "string"
                        },
                        "discordRefreshToken": {
                          "type": "string"
                        },
                        "discordTokenExpiry": {
                          "type": "string"
                        },
                        "discordUserId": {
                          "type": "string"
                        },
                        "isNewsletter": {
                          "type": "boolean"
                        },
                        "membershipPrototype": {
                          "$ref": "#/paths/~1user/patch/requestBody/content/application~1json/schema/properties/membershipPrototype"
                        },
                        "chapterhouse": {
                          "type": "string",
                          "nullable": true
                        },
                        "activeWorld": {
                          "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                        },
                        "activeCampaign": {
                          "type": "string",
                          "nullable": true
                        },
                        "activeCharacter": {
                          "type": "string",
                          "nullable": true
                        },
                        "activeSession": {
                          "type": "string",
                          "nullable": true
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "$ref": "#/paths/~1user/patch/requestBody/content/application~1json/schema"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update User",
        "description": "Update the metadata of a user. Check the schema for all available fields.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "User Reference Schema - GR 2",
                "description": "Adds the avatar and cover image references to the schema output.",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": false
                  },
                  "title": {
                    "type": "string",
                    "example": "Username"
                  },
                  "slug": {
                    "type": "string",
                    "nullable": true,
                    "readOnly": true
                  },
                  "state": {
                    "type": "string",
                    "nullable": true,
                    "readOnly": true
                  },
                  "isWip": {
                    "type": "boolean",
                    "nullable": true,
                    "readOnly": true
                  },
                  "isDraft": {
                    "type": "boolean",
                    "nullable": true,
                    "readOnly": true
                  },
                  "entityClass": {
                    "type": "string",
                    "enum": [
                      "User"
                    ],
                    "readOnly": true
                  },
                  "icon": {
                    "type": "string",
                    "enum": [
                      "fa-solid fa-user"
                    ],
                    "readOnly": true
                  },
                  "url": {
                    "type": "string",
                    "example": "https://worldanvil.com/author/username",
                    "readOnly": true
                  },
                  "subscribergroups": {
                    "type": "array",
                    "items": {
                      "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                    },
                    "example": []
                  },
                  "folderId": {
                    "type": "string",
                    "nullable": true,
                    "example": "-1",
                    "readOnly": true
                  },
                  "tags": {
                    "type": "string",
                    "nullable": true,
                    "example": "tag1,tag2,tag3",
                    "readOnly": true
                  },
                  "updateDate": {
                    "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                  },
                  "enabled": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "token": {
                    "type": "string",
                    "nullable": true,
                    "readOnly": true
                  },
                  "username": {
                    "type": "string"
                  },
                  "firstname": {
                    "type": "string",
                    "nullable": true
                  },
                  "lastname": {
                    "type": "string",
                    "nullable": true
                  },
                  "lastLogin": {
                    "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                  },
                  "bio": {
                    "type": "string"
                  },
                  "locale": {
                    "type": "string"
                  },
                  "primaryUseType": {
                    "type": "string"
                  },
                  "onboardingProgress": {
                    "type": "integer"
                  },
                  "signature": {
                    "type": "string"
                  },
                  "customProfileContent": {
                    "type": "string"
                  },
                  "registerDate": {
                    "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                  },
                  "membershipDate": {
                    "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                  },
                  "membership": {
                    "type": "boolean"
                  },
                  "membershipType": {
                    "type": "string",
                    "readOnly": true
                  },
                  "websiteurl": {
                    "type": "string",
                    "nullable": true
                  },
                  "favMovies": {
                    "type": "string",
                    "nullable": true
                  },
                  "favSeries": {
                    "type": "string",
                    "nullable": true
                  },
                  "favBooks": {
                    "type": "string",
                    "nullable": true
                  },
                  "favWriters": {
                    "type": "string",
                    "nullable": true
                  },
                  "favGames": {
                    "type": "string",
                    "nullable": true
                  },
                  "interests": {
                    "type": "string",
                    "nullable": true
                  },
                  "nanowrimo": {
                    "type": "string",
                    "nullable": true
                  },
                  "twitter": {
                    "type": "string",
                    "nullable": true
                  },
                  "facebook": {
                    "type": "string",
                    "nullable": true
                  },
                  "reddit": {
                    "type": "string",
                    "nullable": true
                  },
                  "tumblr": {
                    "type": "string",
                    "nullable": true
                  },
                  "pinterest": {
                    "type": "string",
                    "nullable": true
                  },
                  "deviantart": {
                    "type": "string",
                    "nullable": true
                  },
                  "youtube": {
                    "type": "string",
                    "nullable": true
                  },
                  "vimeo": {
                    "type": "string",
                    "nullable": true
                  },
                  "google": {
                    "type": "string",
                    "nullable": true
                  },
                  "steam": {
                    "type": "string",
                    "nullable": true
                  },
                  "twitch": {
                    "type": "string",
                    "nullable": true
                  },
                  "discord": {
                    "type": "string",
                    "nullable": true
                  },
                  "instagram": {
                    "type": "string",
                    "nullable": true
                  },
                  "kofi": {
                    "type": "string"
                  },
                  "patreon": {
                    "type": "string",
                    "nullable": true
                  },
                  "mastodon": {
                    "type": "string",
                    "nullable": true
                  },
                  "bluesky": {
                    "type": "string",
                    "nullable": true
                  },
                  "views": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "openText": {
                    "type": "string",
                    "nullable": true
                  },
                  "profileMeta": {
                    "type": "string",
                    "nullable": true
                  },
                  "isVenerable": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "isPremier": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "isLifetime": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "anvilCoinsCurrent": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "email": {
                    "type": "string",
                    "readOnly": true
                  },
                  "timezone": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "dob": {
                    "type": "string",
                    "nullable": true,
                    "readOnly": true
                  },
                  "worldsLimit": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "campaignsLimit": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "uploadSizeLimit": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "storageSpaceLimit": {
                    "type": "string",
                    "format": "int32",
                    "readOnly": true
                  },
                  "coauthors": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "subscriberSlots": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "allowAdultContent": {
                    "type": "boolean"
                  },
                  "featureWorldbuilding": {
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                      0,
                      1
                    ]
                  },
                  "featureRPG": {
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                      0,
                      1
                    ]
                  },
                  "featureCommunity": {
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                      0,
                      1
                    ]
                  },
                  "featureHeroes": {
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                      0,
                      1
                    ]
                  },
                  "featureWriting": {
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                      0,
                      1
                    ]
                  },
                  "featurePrompts": {
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                      0,
                      1
                    ]
                  },
                  "featureAutosave": {
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                      0,
                      1
                    ]
                  },
                  "featureExpandedArticle": {
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                      0,
                      1
                    ]
                  },
                  "isCompetitor": {
                    "type": "boolean"
                  },
                  "interfaceVersion": {
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                      0,
                      1,
                      2
                    ]
                  },
                  "interfaceVignetteRows": {
                    "type": "string"
                  },
                  "interfaceFormBackground": {
                    "type": "string"
                  },
                  "interfaceFormColor": {
                    "type": "string"
                  },
                  "interfaceFormFontSize": {
                    "type": "string"
                  },
                  "interfaceActivateAdvancedSelect": {
                    "type": "boolean"
                  },
                  "interfaceActivateAccessibility": {
                    "type": "boolean"
                  },
                  "manuscriptSettings": {
                    "type": "object",
                    "properties": {
                      "fontSize": {
                        "type": "string"
                      },
                      "lineHeight": {
                        "type": "string"
                      },
                      "paragraphyPadding": {
                        "type": "string"
                      },
                      "cssRules": {
                        "type": "string"
                      },
                      "fontTypeface": {
                        "type": "string"
                      },
                      "paragraphIndent": {
                        "type": "string"
                      },
                      "backgroundColor": {
                        "type": "string"
                      },
                      "fontColor": {
                        "type": "string"
                      },
                      "paragraphPadding": {
                        "type": "string"
                      }
                    }
                  },
                  "interfaceTheme": {
                    "type": "string"
                  },
                  "interfaceEditor": {
                    "type": "string"
                  },
                  "interfaceEditorMode": {
                    "type": "string"
                  },
                  "interfaceEditorTheme": {
                    "type": "string"
                  },
                  "interfaceShowSaveIndicator": {
                    "type": "boolean"
                  },
                  "discordToken": {
                    "type": "string"
                  },
                  "discordRefreshToken": {
                    "type": "string"
                  },
                  "discordTokenExpiry": {
                    "type": "string"
                  },
                  "discordUserId": {
                    "type": "string"
                  },
                  "isNewsletter": {
                    "type": "boolean"
                  },
                  "membershipPrototype": {
                    "type": "object",
                    "title": "Membership Prototype Schema",
                    "description": "This schema represents a membership prototype. These are predefined and cannot be edited.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": false
                      },
                      "title": {
                        "type": "string",
                        "example": "Councilor of the Inner Sanctum"
                      },
                      "slug": {
                        "type": "string",
                        "nullable": true
                      },
                      "state": {
                        "type": "string",
                        "nullable": true
                      },
                      "isWip": {
                        "type": "boolean",
                        "nullable": true
                      },
                      "isDraft": {
                        "type": "boolean",
                        "nullable": true
                      },
                      "entityClass": {
                        "type": "string",
                        "enum": [
                          "MembershipType"
                        ]
                      },
                      "icon": {
                        "type": "string",
                        "nullable": true
                      },
                      "url": {
                        "type": "string",
                        "nullable": true
                      },
                      "subscribergroups": {
                        "type": "array",
                        "items": {
                          "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                        },
                        "example": []
                      },
                      "folderId": {
                        "type": "string"
                      },
                      "tags": {
                        "type": "string"
                      },
                      "updateDate": {
                        "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                      }
                    }
                  },
                  "chapterhouse": {
                    "type": "string",
                    "nullable": true
                  },
                  "activeWorld": {
                    "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                  },
                  "activeCampaign": {
                    "type": "string",
                    "nullable": true
                  },
                  "activeCharacter": {
                    "type": "string",
                    "nullable": true
                  },
                  "activeSession": {
                    "type": "string",
                    "nullable": true
                  },
                  "avatar": {
                    "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                  },
                  "cover": {
                    "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": []
                  },
                  "isEditable": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "success": {
                    "type": "boolean",
                    "readOnly": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the basic reference object of the updated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "User Reference Schema - GR -1",
                  "description": "The most basic user schema, it just contains some basic metadata. Is returned when the granularity is set to -1 and is used as a reference in the other schemas.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "nullable": false
                    },
                    "title": {
                      "type": "string",
                      "example": "Username"
                    },
                    "slug": {
                      "type": "string",
                      "nullable": true
                    },
                    "state": {
                      "type": "string",
                      "nullable": true
                    },
                    "isWip": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "isDraft": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "User"
                      ]
                    },
                    "icon": {
                      "type": "string",
                      "enum": [
                        "fa-solid fa-user"
                      ]
                    },
                    "url": {
                      "type": "string",
                      "example": "https://worldanvil.com/author/username"
                    },
                    "subscribergroups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      },
                      "example": []
                    },
                    "folderId": {
                      "type": "string",
                      "nullable": true,
                      "example": "-1"
                    },
                    "tags": {
                      "type": "string",
                      "nullable": true,
                      "example": "tag1,tag2,tag3"
                    },
                    "updateDate": {
                      "type": "object",
                      "nullable": true,
                      "readOnly": true,
                      "properties": {
                        "date": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": false,
                          "example": "2022-08-23 14:00:42.000000"
                        },
                        "timezone": {
                          "type": "string",
                          "nullable": false,
                          "example": "UTC"
                        },
                        "timezone_type": {
                          "type": "number",
                          "nullable": false,
                          "example": 3
                        }
                      }
                    },
                    "enabled": {
                      "type": "boolean",
                      "readOnly": true
                    },
                    "isEditable": {
                      "type": "boolean",
                      "readOnly": true
                    },
                    "success": {
                      "type": "boolean",
                      "readOnly": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/identity": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Read Token User",
        "description": "Returns the basic user information associated with the authentication token used for this request. This is the first request to start using the API successfully when no other resources are known.",
        "operationId": "readIdentity",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns the basic user information associated with the authentication token used for this request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "nullable": false
                    },
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "username": {
                      "type": "string",
                      "nullable": false,
                      "example": "Username"
                    },
                    "userhash": {
                      "type": "string",
                      "nullable": false,
                      "example": "userhash"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "405": {
            "$ref": "#/components/responses/405"
          }
        }
      }
    },
    "/world": {
      "get": {
        "tags": [
          "World"
        ],
        "summary": "Read World",
        "description": "Retrieve the metadata of a world, content for the homepage, global fields and the world meta. Use the granularity parameter to specify the amount of data you want to receive.",
        "operationId": "readWorld",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "-1",
                "0",
                "1"
              ],
              "example": "-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested world. The included fields depend on the chosen granularity.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "title": "World Reference Schema - GR 0",
                      "description": "The world schema with its core settings and metadata.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": false
                        },
                        "title": {
                          "type": "string",
                          "example": "A Bright New World"
                        },
                        "slug": {
                          "type": "string",
                          "example": "a-bright-new-world-username"
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "private",
                            "public"
                          ]
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "World"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-globe-stand"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "example": "https://worldanvil.com/w/a-bright-new-world-username"
                        },
                        "subscribergroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          }
                        },
                        "folderId": {
                          "type": "string",
                          "example": "-1"
                        },
                        "tags": {
                          "type": "string",
                          "example": "tag1,tag2,tag3"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        },
                        "descriptionParsed": {
                          "type": "string",
                          "nullable": true,
                          "example": "This is a test"
                        },
                        "owner": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                        },
                        "countFollowers": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "countArticles": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "countMaps": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "countTimelines": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "subtitle": {
                          "type": "string",
                          "nullable": true
                        },
                        "locale": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        },
                        "excerpt": {
                          "type": "string",
                          "nullable": true
                        },
                        "isStored": {
                          "type": "boolean"
                        },
                        "displayCss": {
                          "type": "string",
                          "format": "css",
                          "nullable": true
                        },
                        "displayPanelCss": {
                          "type": "string",
                          "format": "css",
                          "nullable": true
                        },
                        "copyright": {
                          "type": "string",
                          "nullable": true
                        },
                        "worldSidebarContent": {
                          "type": "string",
                          "nullable": true
                        },
                        "globalAnnouncement": {
                          "type": "string",
                          "nullable": true
                        },
                        "globalHeader": {
                          "type": "string",
                          "nullable": true
                        },
                        "globalSidebarFooter": {
                          "type": "string",
                          "nullable": true
                        },
                        "globalArticleIntroduction": {
                          "type": "string",
                          "nullable": true
                        },
                        "cover": {
                          "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                        },
                        "genres": {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1world/put/requestBody/content/application~1json/schema/properties/genres/items"
                          }
                        },
                        "theme": {
                          "$ref": "#/paths/~1world/put/requestBody/content/application~1json/schema/properties/theme"
                        },
                        "isEditable": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "success": {
                          "type": "boolean",
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "$ref": "#/paths/~1world/put/requestBody/content/application~1json/schema"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "put": {
        "tags": [
          "World"
        ],
        "summary": "Create World",
        "description": "Create a new world in your account for a new project. The world only requires a title. Check the schema for all available fields.",
        "operationId": "createWorld",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "World Reference Schema - GR 1",
                "description": "The world schema with all of the settings, metadata, homepage content and the world meta content.",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": false
                  },
                  "title": {
                    "type": "string",
                    "example": "A Bright New World"
                  },
                  "slug": {
                    "type": "string",
                    "example": "a-bright-new-world-username"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "private",
                      "public"
                    ]
                  },
                  "isWip": {
                    "type": "boolean",
                    "nullable": true
                  },
                  "isDraft": {
                    "type": "boolean",
                    "nullable": true
                  },
                  "entityClass": {
                    "type": "string",
                    "enum": [
                      "World"
                    ]
                  },
                  "icon": {
                    "type": "string",
                    "enum": [
                      "fa-solid fa-globe-stand"
                    ]
                  },
                  "url": {
                    "type": "string",
                    "example": "https://worldanvil.com/w/a-bright-new-world-username"
                  },
                  "subscribergroups": {
                    "type": "array",
                    "items": {
                      "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                    }
                  },
                  "folderId": {
                    "type": "string",
                    "example": "-1"
                  },
                  "tags": {
                    "type": "string",
                    "example": "tag1,tag2,tag3"
                  },
                  "updateDate": {
                    "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                  },
                  "descriptionParsed": {
                    "type": "string",
                    "nullable": true,
                    "example": "This is a test"
                  },
                  "owner": {
                    "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema"
                  },
                  "countFollowers": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "countArticles": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "countMaps": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "countTimelines": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "subtitle": {
                    "type": "string",
                    "nullable": true
                  },
                  "locale": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "excerpt": {
                    "type": "string",
                    "nullable": true
                  },
                  "isStored": {
                    "type": "boolean"
                  },
                  "displayCss": {
                    "type": "string",
                    "format": "css",
                    "nullable": true
                  },
                  "displayPanelCss": {
                    "type": "string",
                    "format": "css",
                    "nullable": true
                  },
                  "copyright": {
                    "type": "string",
                    "nullable": true
                  },
                  "worldSidebarContent": {
                    "type": "string",
                    "nullable": true
                  },
                  "globalAnnouncement": {
                    "type": "string",
                    "nullable": true
                  },
                  "globalHeader": {
                    "type": "string",
                    "nullable": true
                  },
                  "globalSidebarFooter": {
                    "type": "string",
                    "nullable": true
                  },
                  "globalArticleIntroduction": {
                    "type": "string",
                    "nullable": true
                  },
                  "cover": {
                    "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                  },
                  "genres": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "title": "Genre",
                      "description": "The schema for a world genre.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": false
                        },
                        "title": {
                          "type": "string",
                          "example": "Fantasy, Urban"
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "nullable": true
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "Genre"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-film-simple"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "example": [],
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          }
                        },
                        "folderId": {
                          "type": "string",
                          "nullable": true,
                          "example": "null"
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true,
                          "example": "null"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        }
                      }
                    }
                  },
                  "theme": {
                    "type": "object",
                    "title": "Theme",
                    "description": "This schema represents a theme of a world. These are predefined and cannot be edited.",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": false
                      },
                      "title": {
                        "type": "string",
                        "example": "Image Title"
                      },
                      "slug": {
                        "type": "string",
                        "nullable": true
                      },
                      "state": {
                        "type": "string",
                        "enum": [
                          "private",
                          "public"
                        ]
                      },
                      "isWip": {
                        "type": "boolean",
                        "nullable": true
                      },
                      "isDraft": {
                        "type": "boolean",
                        "nullable": true
                      },
                      "entityClass": {
                        "type": "string",
                        "enum": [
                          "Theme"
                        ]
                      },
                      "icon": {
                        "type": "string",
                        "enum": [
                          "fa-solid fa-palette"
                        ]
                      },
                      "url": {
                        "type": "string",
                        "nullable": true
                      },
                      "subscribergroups": {
                        "type": "array",
                        "items": {
                          "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                        },
                        "example": []
                      },
                      "folderId": {
                        "type": "string",
                        "nullable": true
                      },
                      "tags": {
                        "type": "string",
                        "nullable": true
                      },
                      "updateDate": {
                        "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                      }
                    }
                  },
                  "activationDescription": {
                    "type": "string",
                    "nullable": true
                  },
                  "weight": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "creationDate": {
                    "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                  },
                  "timeNeg": {
                    "type": "string",
                    "example": "Before Common Era"
                  },
                  "timePos": {
                    "type": "string",
                    "example": "Common Era"
                  },
                  "timeNegAbbr": {
                    "type": "string",
                    "example": "BCE"
                  },
                  "timePosAbbr": {
                    "type": "string",
                    "example": "CE"
                  },
                  "timeCurrentYear": {
                    "type": "string",
                    "example": "2023"
                  },
                  "timeCurrentMonth": {
                    "type": "integer",
                    "format": "int32",
                    "example": 12
                  },
                  "timeCurrentDay": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1
                  },
                  "timeCurrentDescription": {
                    "type": "string",
                    "example": "December 1st, 2023"
                  },
                  "worldDateFormat": {
                    "type": "string",
                    "nullable": true
                  },
                  "displayRecentArticles": {
                    "type": "boolean"
                  },
                  "displayOtherArticles": {
                    "type": "boolean"
                  },
                  "displayArticleTooltips": {
                    "type": "boolean"
                  },
                  "displaySharingButtons": {
                    "type": "boolean"
                  },
                  "displayCommunityFeatures": {
                    "type": "boolean"
                  },
                  "displayCampaigns": {
                    "type": "boolean"
                  },
                  "displayHeroes": {
                    "type": "boolean"
                  },
                  "displayBlockHeaders": {
                    "type": "boolean"
                  },
                  "displaySecureLinks": {
                    "type": "boolean"
                  },
                  "placementToc": {
                    "type": "string",
                    "enum": [
                      "left",
                      "center",
                      "right"
                    ]
                  },
                  "placementMaps": {
                    "type": "string",
                    "enum": [
                      "left",
                      "center",
                      "right"
                    ]
                  },
                  "placementTimelines": {
                    "type": "string",
                    "enum": [
                      "left",
                      "center",
                      "right"
                    ]
                  },
                  "homepageContent1": {
                    "type": "string",
                    "nullable": true
                  },
                  "homepageContent2": {
                    "type": "string",
                    "nullable": true
                  },
                  "homepageContent3": {
                    "type": "string",
                    "nullable": true
                  },
                  "homepageContent4": {
                    "type": "string",
                    "nullable": true
                  },
                  "displayJs": {
                    "type": "string",
                    "nullable": true
                  },
                  "displayStyles": {
                    "type": "object",
                    "properties": {
                      "display_background": {
                        "type": "string"
                      },
                      "display_background_id": {
                        "type": "string"
                      },
                      "display_base_font_color": {
                        "type": "string"
                      },
                      "display_base_font_size": {
                        "type": "string"
                      }
                    }
                  },
                  "displayDefaultTheme": {
                    "type": "boolean"
                  },
                  "displayBootstrapVersion": {
                    "type": "string",
                    "enum": [
                      "bs3",
                      "bs5"
                    ]
                  },
                  "twitter": {
                    "type": "string",
                    "nullable": true
                  },
                  "facebook": {
                    "type": "string",
                    "nullable": true
                  },
                  "patreon": {
                    "type": "string",
                    "nullable": true
                  },
                  "twitch": {
                    "type": "string",
                    "nullable": true
                  },
                  "discord": {
                    "type": "string",
                    "nullable": true
                  },
                  "views": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "isWhitelabel": {
                    "type": "boolean"
                  },
                  "isCommunity": {
                    "type": "boolean"
                  },
                  "isFeatured": {
                    "type": "boolean"
                  },
                  "gatrackingcode": {
                    "type": "string"
                  },
                  "followersNominal": {
                    "type": "string"
                  },
                  "followersPlural": {
                    "type": "string"
                  },
                  "displayWorldMeta": {
                    "type": "boolean"
                  },
                  "openSecrets": {
                    "type": "boolean"
                  },
                  "articlesPrivateOnCreation": {
                    "type": "boolean"
                  },
                  "worldCreditsOverride": {
                    "type": "string",
                    "nullable": true
                  },
                  "accessDeniedPage": {
                    "$ref": "#/paths/~1article/put/responses/200/content/application~1json/schema"
                  },
                  "globalcover": {
                    "$ref": "#/paths/~1image/patch/responses/200/content/application~1json/schema"
                  },
                  "worldmap": {
                    "$ref": "#/paths/~1map/put/responses/200/content/application~1json/schema"
                  },
                  "customArticleTemplates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "title": "Custom Article Template Schema",
                      "description": "The reference schema for a custom article template.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": false,
                          "readOnly": true
                        },
                        "title": {
                          "type": "string",
                          "example": "Custom Article Template Name",
                          "readOnly": true
                        },
                        "slug": {
                          "type": "string",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "nullable": true
                        },
                        "isWip": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "isDraft": {
                          "type": "boolean",
                          "nullable": true
                        },
                        "entityClass": {
                          "type": "string",
                          "enum": [
                            "CustomArticleTemplate"
                          ]
                        },
                        "icon": {
                          "type": "string",
                          "enum": [
                            "fa-solid fa-flask-round-potion"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "nullable": true
                        },
                        "subscribergroups": {
                          "type": "array",
                          "example": [],
                          "items": {
                            "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                          }
                        },
                        "folderId": {
                          "type": "string",
                          "nullable": true,
                          "example": "null"
                        },
                        "tags": {
                          "type": "string",
                          "nullable": true,
                          "example": "null"
                        },
                        "updateDate": {
                          "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                        }
                      }
                    }
                  },
                  "defaultCalendar": {
                    "type": "string",
                    "nullable": true
                  },
                  "metaTitle": {
                    "type": "string",
                    "nullable": true
                  },
                  "metaDescription": {
                    "type": "string",
                    "nullable": true
                  },
                  "worldScrapBook": {
                    "type": "string",
                    "nullable": true
                  },
                  "foundationMotivation": {
                    "type": "string",
                    "nullable": true
                  },
                  "foundationGoal": {
                    "type": "string",
                    "nullable": true
                  },
                  "foundationUsp": {
                    "type": "string",
                    "nullable": true
                  },
                  "foundationThemeGenre": {
                    "type": "string",
                    "nullable": true
                  },
                  "foundationThemeFeel": {
                    "type": "string",
                    "nullable": true
                  },
                  "foundationThemeTone": {
                    "type": "string",
                    "nullable": true
                  },
                  "foundationThemeThemes": {
                    "type": "string",
                    "nullable": true
                  },
                  "foundationThemeAgency": {
                    "type": "string",
                    "nullable": true
                  },
                  "foundationMetaExpanded": {
                    "type": "string",
                    "nullable": true
                  },
                  "foundationDramaExpanded": {
                    "type": "string",
                    "nullable": true
                  },
                  "settingRules": {
                    "type": "string",
                    "nullable": true
                  },
                  "settingCosmology": {
                    "type": "string",
                    "nullable": true
                  },
                  "settingGeography": {
                    "type": "string",
                    "nullable": true
                  },
                  "settingSize": {
                    "type": "string",
                    "nullable": true
                  },
                  "settingPeopleAndHistory": {
                    "type": "string",
                    "nullable": true
                  },
                  "settingPeopleSpeciesAndCultures": {
                    "type": "string",
                    "nullable": true
                  },
                  "settingNeedsAndRelations": {
                    "type": "string",
                    "nullable": true
                  },
                  "inspirationImages": {
                    "type": "string",
                    "nullable": true
                  },
                  "inspirationMusic": {
                    "type": "string",
                    "nullable": true
                  },
                  "inspirationBooks": {
                    "type": "string",
                    "nullable": true
                  },
                  "inspirationMoviesAndTv": {
                    "type": "string",
                    "nullable": true
                  },
                  "markCompleteWorldMeta": {
                    "type": "boolean"
                  },
                  "lockSlug": {
                    "type": "boolean"
                  },
                  "prepareJs": {
                    "type": "string",
                    "nullable": true
                  },
                  "goalWords": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "webhookGlobal": {
                    "type": "string",
                    "example": "https://discord.com/api/webhooks/<id>/<token>"
                  },
                  "accessCode": {
                    "type": "string",
                    "nullable": true
                  },
                  "activateVisibilityToggle": {
                    "type": "boolean"
                  },
                  "isEditable": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "success": {
                    "type": "boolean",
                    "readOnly": true
                  }
                }
              },
              "example": {
                "title": "A bright new World"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the reference object of the new world.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "World Reference Schema - GR -1",
                  "description": "The most basic world schema, it just contains the most basic metadata. Is returned when the granularity is set to -1 and is used as a reference in the other schemas.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "nullable": false
                    },
                    "title": {
                      "type": "string",
                      "example": "A Bright New World"
                    },
                    "slug": {
                      "type": "string",
                      "example": "a-bright-new-world-username"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "private",
                        "public"
                      ]
                    },
                    "isWip": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "isDraft": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "entityClass": {
                      "type": "string",
                      "enum": [
                        "World"
                      ]
                    },
                    "icon": {
                      "type": "string",
                      "enum": [
                        "fa-solid fa-globe-stand"
                      ]
                    },
                    "url": {
                      "type": "string",
                      "example": "https://worldanvil.com/w/a-bright-new-world-username"
                    },
                    "subscribergroups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1subscribergroup/patch/responses/200/content/application~1json/schema"
                      }
                    },
                    "folderId": {
                      "type": "string",
                      "example": "-1"
                    },
                    "tags": {
                      "type": "string",
                      "example": "tag1,tag2,tag3"
                    },
                    "updateDate": {
                      "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                    },
                    "isEditable": {
                      "type": "boolean",
                      "readOnly": true
                    },
                    "success": {
                      "type": "boolean",
                      "readOnly": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": [
          "World"
        ],
        "summary": "Delete World",
        "description": "Delete a world with the given ID. This will also delete all articles, characters, locations, items, etc. that are associated with this world and cannot be reversed!!",
        "operationId": "deleteWorld",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The world was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "tags": [
          "World"
        ],
        "summary": "Update World",
        "description": "Update the content and settings of the world. Check the schema for all available fields.",
        "operationId": "updateWorld",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1world/put/requestBody/content/application~1json/schema"
              },
              "example": {
                "title": "A Bright New World"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully executed the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1world/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/user/worlds": {
      "post": {
        "tags": [
          "World"
        ],
        "summary": "List Worlds By User",
        "description": "Retrieve the worlds owned by the user. Requires the id of the user as a parameter. The list can be filtered by the limit and offset parameters.",
        "operationId": "listWorldsByUser",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1markertypes/post/requestBody/content/application~1json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of worlds owned by the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "entities": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "format": "uuid",
                                "example": "7bdc218a-6303-4d6e-b06a-211e6d515c29",
                                "readOnly": true
                              },
                              "title": {
                                "type": "string",
                                "example": "Title of Resource"
                              },
                              "slug": {
                                "type": "string",
                                "nullable": true
                              },
                              "state": {
                                "type": "string",
                                "enum": [
                                  "private",
                                  "public"
                                ]
                              },
                              "isWip": {
                                "type": "boolean",
                                "nullable": true
                              },
                              "isDraft": {
                                "type": "boolean",
                                "nullable": true
                              },
                              "entityClass": {
                                "type": "string",
                                "enum": [
                                  "World"
                                ],
                                "readOnly": true
                              },
                              "url": {
                                "type": "string",
                                "example": "https://worldanvil.com/...",
                                "readOnly": true
                              },
                              "icon": {
                                "type": "string",
                                "example": "fa-solid fa-box-archive"
                              },
                              "folderId": {
                                "type": "string",
                                "nullable": true
                              },
                              "tags": {
                                "type": "string",
                                "nullable": true
                              },
                              "updateDate": {
                                "$ref": "#/paths/~1user/patch/responses/200/content/application~1json/schema/properties/updateDate"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "title": "World Reference",
                            "properties": {
                              "ownership": {
                                "type": "string",
                                "enum": [
                                  "owner"
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Article"
    },
    {
      "name": "Block"
    },
    {
      "name": "Block Folder"
    },
    {
      "name": "Block Template"
    },
    {
      "name": "Block Template Part"
    },
    {
      "name": "Category"
    },
    {
      "name": "Canvas"
    },
    {
      "name": "RPG System"
    },
    {
      "name": "Timeline"
    },
    {
      "name": "History"
    },
    {
      "name": "Image"
    },
    {
      "name": "Map"
    },
    {
      "name": "Map Layer"
    },
    {
      "name": "Marker Group"
    },
    {
      "name": "Marker"
    },
    {
      "name": "Marker Type (Pin)"
    },
    {
      "name": "Manuscript"
    },
    {
      "name": "Manuscript Beat"
    },
    {
      "name": "Manuscript Bookmark"
    },
    {
      "name": "Manuscript Part"
    },
    {
      "name": "Manuscript Version"
    },
    {
      "name": "Manuscript Tag"
    },
    {
      "name": "Manuscript Stat"
    },
    {
      "name": "Manuscript Label"
    },
    {
      "name": "Manuscript Plot"
    },
    {
      "name": "Notebook"
    },
    {
      "name": "Notesection"
    },
    {
      "name": "Note"
    },
    {
      "name": "Secret"
    },
    {
      "name": "Subscribergroup"
    },
    {
      "name": "Variable"
    },
    {
      "name": "Variable Collection"
    },
    {
      "name": "User"
    },
    {
      "name": "World"
    }
  ],
  "security": [
    {
      "UserAuthenticationToken": []
    },
    {
      "ApplicationKey": []
    }
  ],
  "components": {
    "links": {},
    "callbacks": {},
    "schemas": {},
    "securitySchemes": {
      "ApplicationKey": {
        "type": "apiKey",
        "name": "x-application-key",
        "in": "header"
      },
      "UserAuthenticationToken": {
        "type": "apiKey",
        "name": "x-auth-token",
        "in": "header"
      }
    },
    "responses": {
      "400": {
        "description": "Bad request. The request was unacceptable, often due to missing a required parameter."
      },
      "401": {
        "description": "Unauthorized. Application key or auth token provided is invalid, revoked or was not provided with the request.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "nullable": false,
                  "default": false
                },
                "error": {
                  "type": "string",
                  "nullable": false,
                  "default": "access_denied_auth_failed"
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Access forbidden. The user is not allowed to access the resource.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "nullable": false,
                  "default": false
                },
                "error": {
                  "type": "string",
                  "nullable": false,
                  "default": "access_denied"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found. The URI requested is invalid or the resource requested, such as a world, does not exists.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "nullable": false,
                  "default": false
                },
                "error": {
                  "type": "string",
                  "nullable": false,
                  "default": "resource_not_found"
                }
              }
            }
          }
        }
      },
      "405": {
        "description": "Method not allowed. The method specified in the request is not allowed. The response is an HTML page."
      },
      "422": {
        "description": "Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors. Update the request and try again.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "nullable": false,
                  "default": false
                },
                "status": {
                  "type": "string",
                  "nullable": false,
                  "default": "Unprocessable Data provided"
                },
                "error": {
                  "type": "object",
                  "nullable": false,
                  "properties": {
                    "summary": {
                      "type": "string",
                      "nullable": false
                    },
                    "traceStack": {
                      "type": "string",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "example": {
              "summary": "Example of an unprocessable entity response",
              "value": {
                "success": false,
                "status": "Unprocessable Data provided",
                "error": {
                  "summary": "A short summary of what the error is.",
                  "traceStack": "The tracestack of the error. Use this to report a bug if you cannot figure out what is wrong."
                }
              }
            }
          }
        }
      }
    }
  }
}